<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anacoda3 安装Pytorch小记录</title>
    <url>/2019/12/30/Anacoda3%20%E5%AE%89%E8%A3%85Pytorch%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>

<h4 id="1-下载Anadoda3安装包"><a href="#1-下载Anadoda3安装包" class="headerlink" title="1.下载Anadoda3安装包"></a>1.下载Anadoda3安装包</h4><ul>
<li><p>可以选择清华镜像源</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Windows-x86_64.exe" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Windows-x86_64.exe</a></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228165427982.png" alt=""></p>
<ul>
<li><p>有条件的可以选择官网下载</p>
<p><a href="https://repo.anaconda.com/archive/Anaconda3-2019.10-Windows-x86_64.exe" target="_blank" rel="noopener">https://repo.anaconda.com/archive/Anaconda3-2019.10-Windows-x86_64.exe</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228170139071.png" alt="image-20191228170139071"></p>
</li>
</ul>
<h4 id="2-双击安装"><a href="#2-双击安装" class="headerlink" title="2.双击安装"></a>2.双击安装</h4><p><em>注意：安装时可以选择将Anaconda注册为默认的Python环境</em></p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228170508433.png" alt="image-20191228170508433" style="zoom:67%;" /></p>
<p>然后一路next就可以了</p>
<p>安装完成！</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228170821162.png" alt="image-20191228170821162"></p>
<p>接下来到了很重要的环节————</p>
<h4 id="3-创建conda虚拟环境"><a href="#3-创建conda虚拟环境" class="headerlink" title="3.创建conda虚拟环境"></a>3.创建conda虚拟环境</h4><p>为什么要创建虚拟环境呢？</p>
<p>Anaconda主要是对python中的各个包进行管理与部署，从而方便用户的使用体验。</p>
<p>在从github上面下载别人的代码之后，不同的代码往往需要特定的运行环境。比如说有些代码需要在python3.6的环境下运行，有些代码需要在python2.7的环境下运行。</p>
<p>这个时候，就需要conda出马了</p>
<h5 id="选择Anaconda-Prompt-Anaconda3-以管理员身份运行"><a href="#选择Anaconda-Prompt-Anaconda3-以管理员身份运行" class="headerlink" title="选择Anaconda Prompt (Anaconda3)以管理员身份运行"></a>选择Anaconda Prompt (Anaconda3)以管理员身份运行</h5><p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228171544280.png" alt="image-20191228171544280"></p>
<h5 id="输入命令："><a href="#输入命令：" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda create -n environment_name python=3 numpy  pytorch torchvision cpuonly -c pytorch</code></p>
<p>注意：以上命令是安装CPU版本的Pytorch</p>
<h5 id="如需安装GPU版本的Pytorch可以去官网查看对应命令"><a href="#如需安装GPU版本的Pytorch可以去官网查看对应命令" class="headerlink" title="如需安装GPU版本的Pytorch可以去官网查看对应命令"></a>如需安装GPU版本的Pytorch可以去官网查看对应命令</h5><p><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228172220826.png" alt="image-20191228172220826"></p>
<h5 id="然后一路敲y直到安装完成"><a href="#然后一路敲y直到安装完成" class="headerlink" title="然后一路敲y直到安装完成"></a>然后一路敲y直到安装完成</h5><p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228172356834.png" alt="image-20191228172356834"></p>
<p>接下来需要切换到刚刚创建好的虚拟环境</p>
<h5 id="输入命令：-1"><a href="#输入命令：-1" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda activate pytorch</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228172503786.png" alt="image-20191228172503786"></p>
<h5 id="安装-librosa-音频处理库"><a href="#安装-librosa-音频处理库" class="headerlink" title="安装 librosa 音频处理库"></a>安装 librosa 音频处理库</h5><p><code>conda install -c conda-forge librosa</code></p>
<h4 id="4-最后一步：安装Spyder-IDE"><a href="#4-最后一步：安装Spyder-IDE" class="headerlink" title="4.最后一步：安装Spyder IDE"></a>4.最后一步：安装Spyder IDE</h4><h5 id="输入命令：-2"><a href="#输入命令：-2" class="headerlink" title="输入命令："></a>输入命令：</h5><p><code>conda install spyder</code></p>
<h5 id="没有问题的话输入命令："><a href="#没有问题的话输入命令：" class="headerlink" title="没有问题的话输入命令："></a>没有问题的话输入命令：</h5><p><code>spyder</code></p>
<p>会自动打开spyder4窗口</p>
<h5 id="如果出现"><a href="#如果出现" class="headerlink" title="如果出现"></a>如果出现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(pytorch) C:\Windows\system32&gt;spyder</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py"</span>, line <span class="number">204</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> PySide <span class="keyword">import</span> __version__ <span class="keyword">as</span> PYSIDE_VERSION  <span class="comment"># analysis:ignore</span></span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'PySide'</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\Scripts\spyder-script.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\start.py"</span>, line <span class="number">201</span>, <span class="keyword">in</span> main</span><br><span class="line">    <span class="keyword">from</span> spyder.app <span class="keyword">import</span> mainwindow</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\app\mainwindow.py"</span>, line <span class="number">52</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    requirements.check_qt()</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\spyder\requirements.py"</span>, line <span class="number">41</span>, <span class="keyword">in</span> check_qt</span><br><span class="line">    <span class="keyword">import</span> qtpy</span><br><span class="line">  File <span class="string">"C:\ProgramData\Anaconda3\envs\pytorch\lib\site-packages\qtpy\__init__.py"</span>, line <span class="number">210</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> PythonQtError(<span class="string">'No Qt bindings could be found'</span>)</span><br><span class="line">qtpy.PythonQtError: No Qt bindings could be found</span><br></pre></td></tr></table></figure>

<p>说明没有安装 pyqt</p>
<p>输入命令</p>
<p><code>conda install pyqt</code>   </p>
<p>即可</p>
<h5 id="至此，pytorch安装完成，你又可以愉快的机器学习了"><a href="#至此，pytorch安装完成，你又可以愉快的机器学习了" class="headerlink" title="至此，pytorch安装完成，你又可以愉快的机器学习了"></a>至此，pytorch安装完成，你又可以愉快的机器学习了</h5><p>安装完成后，你会发现开始栏多了一个Spyder，从此，可以直接从这里打开你刚刚创建的虚拟环境对应的Spyder~</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228174316358.png" alt="image-20191228174316358"></p>
]]></content>
      <tags>
        <tag>学习教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Gost服务配置指南</title>
    <url>/2020/03/23/Gost%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>gost服务操作指南</p>
<a id="more"></a>

<h5 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.coding.net/p/shell/d/shell/git/raw/master/gost/gost &amp;&amp; chmod +x &amp;&amp; mv gost /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>

<p>具体请查看</p>
<p><a href="https://fly97.coding.net/p/shell/d/shell/git/tree/master/gost" target="_blank" rel="noopener">https://fly97.coding.net/p/shell/d/shell/git/tree/master/gost</a></p>
<h5 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a><del>安装服务端</del></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.fun/files/git/gost/go.sh &amp;&amp; chmod +x go.sh</span><br></pre></td></tr></table></figure>

<h5 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a><del>安装客户端</del></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.fun/files/git/gost/gost-linux-amd64 </span><br><span class="line">mv gost-linux-amd64 /usr/<span class="built_in">local</span>/bin/gost</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/gost</span><br></pre></td></tr></table></figure>

<h5 id="客户端用法示例"><a href="#客户端用法示例" class="headerlink" title="客户端用法示例"></a><del>客户端用法示例</del></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L=user:password@:port -F=socks+tls://user:password@ip:port &gt;&gt; gost.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="国外下载"><a href="#国外下载" class="headerlink" title="国外下载"></a>国外下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ginuerzh/gost/releases/download/v2.10.1/gost-linux-amd64-2.10.1.gz &amp;&amp; gzip gost-linux-amd64-2.10.1.gz -d &amp;&amp; chmod +x gost-linux-amd64-2.10.1 &amp;&amp; mv gost-linux-amd64-2.10.1 gost</span><br></pre></td></tr></table></figure>

<h3 id="国内下载"><a href="#国内下载" class="headerlink" title="国内下载"></a><del>国内下载</del></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.coding.net/p/saving/d/saving/git/raw/master/gost-linux-amd64-2.10.1.gz &amp;&amp; gzip gost-linux-amd64-2.10.1.gz -d &amp;&amp; chmod +x gost-linux-amd64-2.10.1 &amp;&amp; mv gost-linux-amd64-2.10.1 gost</span><br></pre></td></tr></table></figure>

<h3 id="推荐几个常用的配置"><a href="#推荐几个常用的配置" class="headerlink" title="推荐几个常用的配置"></a>推荐几个常用的配置</h3><h4 id="1-多路复用tls"><a href="#1-多路复用tls" class="headerlink" title="1.多路复用tls"></a>1.多路复用tls</h4><p>GOST内置了TLS证书，如果需要使用自定义TLS证书，有两种方法：</p>
<ul>
<li>在GOST运行目录放置<code>cert.pem</code>(公钥)和<code>key.pem</code>(私钥)两个文件即可，GOST会自动加载运行目录下的cert.pem和key.pem文件。</li>
</ul>
<h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L mtls://:443</span><br></pre></td></tr></table></figure>

<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L :8080 -F mtls://server_ip:443</span><br></pre></td></tr></table></figure>

<h5 id="客户端证书校验"><a href="#客户端证书校验" class="headerlink" title="客户端证书校验"></a>客户端证书校验</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L=:8080 -F=<span class="string">"tls://server_domain_name:443?secure=true"</span></span><br></pre></td></tr></table></figure>

<h5 id="客户端证书锁定"><a href="#客户端证书锁定" class="headerlink" title="客户端证书锁定"></a>客户端证书锁定</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L=:8080 -F=<span class="string">"tls://:443?ca=ca.pem"</span></span><br></pre></td></tr></table></figure>

<h4 id="2-socks5-over-tls"><a href="#2-socks5-over-tls" class="headerlink" title="2.socks5 over tls"></a>2.socks5 over tls</h4><p>使用TLS加密的SOCKS5代理服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L socks5+tls://:1080</span><br></pre></td></tr></table></figure>

<h4 id="3-多路复用加密websocket"><a href="#3-多路复用加密websocket" class="headerlink" title="3.多路复用加密websocket"></a>3.多路复用加密websocket</h4><p>具有多路复用特性并使用TLS加密的Websocket隧道。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gost -L mwss://:443</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gost</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见操作之在本地目录下关联远程仓库和如何取消本地目录下关联的远程库</title>
    <url>/2020/03/07/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>不说废话，上教程。</p>
<a id="more"></a>

<h5 id="1-在本地目录下关联远程repository-："><a href="#1-在本地目录下关联远程repository-：" class="headerlink" title="1.在本地目录下关联远程repository ："></a>1.在本地目录下关联远程repository ：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:git_username/repository_name.git</span><br></pre></td></tr></table></figure>

<h5 id="2-取消本地目录下关联的远程库："><a href="#2-取消本地目录下关联的远程库：" class="headerlink" title="2.取消本地目录下关联的远程库："></a>2.取消本地目录下关联的远程库：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo配置全记录</title>
    <url>/2020/04/16/Hexo%E9%85%8D%E7%BD%AE%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>hexo爬坑全记录</p>
<a id="more"></a>

<h5 id="1-启用标签页面"><a href="#1-启用标签页面" class="headerlink" title="1.启用标签页面"></a>1.启用标签页面</h5><p>编辑全站配置文件，搜索menu下tags设置，取消注释。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200216170345290.png" alt="image-20200216170345290"></p>
<p>在hexo根目录下执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"文章分类"</span></span><br></pre></td></tr></table></figure>

<p>添加<code>type: &quot;tags&quot;</code>到内容中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2020-02-16 17:00:24</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>保存并关闭文件。生成后的主页如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200216170109378.png" alt="image-20200216170109378"></p>
<h5 id="2-给文章添加“tags”属性"><a href="#2-给文章添加“tags”属性" class="headerlink" title="2.给文章添加“tags”属性"></a>2.给文章添加“tags”属性</h5><p>打开需要添加标签的文章，为其添加tags属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Ubuntu安装nodejs并更改npm镜像源</span><br><span class="line">date: 2019&#x2F;1&#x2F;6 20:46:25</span><br><span class="line">updated: 2020&#x2F;1&#x2F;20 20:10:20</span><br><span class="line">tags: </span><br><span class="line">- Linux运维</span><br><span class="line">- nodejs</span><br></pre></td></tr></table></figure>

<p>上方的<code>Linux运维</code>  <code>nodejs</code>就是文章的标签了。</p>
<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p>
<h5 id="3-设置置顶文章"><a href="#3-设置置顶文章" class="headerlink" title="3.设置置顶文章"></a>3.设置置顶文章</h5><p>在hexo根目录下执行命令（安装插件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>然后在需要置顶的文章的Front-matter中加上top即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="number">2019</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-02</span><span class="number">-14</span> <span class="number">16</span><span class="string">:10:03</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span> <span class="comment">#或者是数字</span></span><br></pre></td></tr></table></figure>

<h5 id="4-通过相对路径在文章中引用图片"><a href="#4-通过相对路径在文章中引用图片" class="headerlink" title="4.通过相对路径在文章中引用图片"></a>4.通过相对路径在文章中引用图片</h5><p>修改全站配置文件，将post_asset_folder选项修改为true。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200216171946614.png" alt="image-20200216171946614"></p>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post_name</span><br></pre></td></tr></table></figure>

<p>在source/_posts中会生成文章<code>post_name.md和</code>同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章</p>
<p>就可以使用相对路径引用图片资源了。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[](image.jpg)</span><br></pre></td></tr></table></figure>

<h5 id="5-启用文章置顶"><a href="#5-启用文章置顶" class="headerlink" title="5.启用文章置顶"></a>5.启用文章置顶</h5><p>使用修改后支持置顶的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line"></span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之crontab定时任务</title>
    <url>/2020/04/24/Linux%E4%B9%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>Linux中的crontab - - - -一个自定义定时器</p>
<a id="more"></a>

<h5 id="1-crontab命令"><a href="#1-crontab命令" class="headerlink" title="1.crontab命令"></a>1.crontab命令</h5><p>重新指定crobtab定时任务文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab $filepath</span><br></pre></td></tr></table></figure>

<p>查看crontab定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<p>编辑、安装定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p><strong>2.crontab时间举例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天早上6点 </span></span><br><span class="line">0 6 * * * echo "Good morning." &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每两个小时 </span></span><br><span class="line">0 */2 * * * echo "Have a break now." &gt;&gt; /tmp/test.txt  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 晚上11点到早上8点之间每两个小时和早上八点 </span></span><br><span class="line">0 23-7/2，8 * * * echo "Have a good dream" &gt;&gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </span></span><br><span class="line">0 11 4 * 1-3 command line</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1月1日早上4点 </span></span><br><span class="line">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时（第一分钟）执行/etc/cron.hourly内的脚本</span></span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天（凌晨4：02）执行/etc/cron.daily内的脚本</span></span><br><span class="line">02 4 * * * root run-parts /etc/cron.daily </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本</span></span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 </span></span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:  <span class="string">"run-parts"</span>这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </span></span><br><span class="line">5，15，25，35，45，55 16，17，18 * * * command</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</span></span><br><span class="line">00 15 * *1，3，5 shutdown -r +5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </span></span><br><span class="line">10，40 * * * * innd/bbslink </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每小时的1分执行用户目录下的bin/account这个指令： </span></span><br><span class="line">1 * * * * bin/account</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每1分钟执行以下命令</span></span><br><span class="line">*/1 * * * * bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： </span></span><br><span class="line">203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）</span><br></pre></td></tr></table></figure>

<h5 id="3-crontab任务举例"><a href="#3-crontab任务举例" class="headerlink" title="3.crontab任务举例"></a>3.crontab任务举例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /bin/bash /root/kaoyan/tiaoji.sh</span><br></pre></td></tr></table></figure>

<p>sh写法举例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">cd /root/kaoyan</span><br><span class="line">/root/***/python3 *.py &gt;&gt; /root/****/*.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash">将所有输出写入日志文件</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器更换密钥</title>
    <url>/2019/01/06/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%8D%A2%E5%AF%86%E9%92%A5%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><strong>1. 制作密钥对</strong></p>
<p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host ~]$ ssh-keygen  &lt;== 建立密钥对</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): &lt;== 按 Enter</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class="line">Enter same passphrase again: &lt;== 再输入一遍密钥锁码</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa. &lt;== 私钥</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub. &lt;== 公钥</span><br><span class="line">The key fingerprint is:</span><br><span class="line">0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host</span><br></pre></td></tr></table></figure>

<p>密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</p>
<p>现在，在 root 用户的家目录中生成了一个 <code>.ssh</code> 的隐藏目录，内含两个密钥文件。<code>id_rsa</code> 为私钥，<code>id_rsa.pub</code> 为公钥。</p>
<p><strong>2. 在服务器上安装公钥</strong></p>
<p>键入以下命令，在服务器上安装公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host ~]$ <span class="built_in">cd</span> .ssh</span><br><span class="line">[root@host .ssh]$ cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host .ssh]$ chmod 600 authorized_keys</span><br><span class="line">[root@host .ssh]$ chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>

<p><strong>3. 设置 SSH，打开密钥登录功能</strong></p>
<p>编辑 <code>/etc/ssh/sshd_config</code> 文件，进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>

<p>另外，请留意 root 用户能否通过 SSH 登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure>

<p>最后，重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@host .ssh]$ service sshd restart</span><br></pre></td></tr></table></figure>

<h6 id="已写好了脚本："><a href="#已写好了脚本：" class="headerlink" title="已写好了脚本："></a>已写好了脚本：</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O pub.sh https://fly97.coding.net/p/shell/d/shell/git/raw/master/rsa/id_rsa.sh &amp;&amp; chmod +x pub.sh &amp;&amp; bash pub.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>密钥</tag>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Onelist服务安装指南</title>
    <url>/2020/01/01/OneList%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>onedrive列表索引服务</p>
<a id="more"></a>

<h5 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.coding.net/p/saving/d/saving/git/raw/master/shell/golist.sh &amp;&amp; chmod +x golist.sh &amp;&amp; ./golist.sh</span><br></pre></td></tr></table></figure>

<h5 id="以下转载自萌咖大佬"><a href="#以下转载自萌咖大佬" class="headerlink" title="以下转载自萌咖大佬"></a>以下转载自萌咖大佬</h5><p><a href="https://github.com/MoeClub/OneList/blob/master/Rewrite/README.MD" target="_blank" rel="noopener">https://github.com/MoeClub/OneList/blob/master/Rewrite/README.MD</a></p>
<h5 id="OneList-Written-in-GoLang"><a href="#OneList-Written-in-GoLang" class="headerlink" title="OneList - Written in GoLang"></a>OneList - Written in GoLang</h5><ul>
<li>支持 国际版, 个人免费版(家庭版), 中国版(世纪互联).</li>
<li>支持同时列出多个盘的目录.(同时挂载多个网盘或单个网盘挂载成多个<code>SubPath</code>,要求每个<code>SubPath</code>唯一)</li>
<li>支持文件夹内超过 200 个项目</li>
<li>支持后台自动刷新缓存.</li>
<li>支持路径中含有特殊字符.</li>
<li>支持使用不同目录使用不同账户密码加密(HTTP 401).</li>
<li>支持隐藏目录和文件(跳过缓存).</li>
<li>支持自定义 ClientID 和 SecretKey .</li>
<li>数据储存在内存中,响应更加迅速.</li>
</ul>
<h6 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h6><h3 id="通过下面URL登录-右键新标签打开"><a href="#通过下面URL登录-右键新标签打开" class="headerlink" title="通过下面URL登录 (右键新标签打开)"></a>通过下面URL登录 (右键新标签打开)</h3><h4 id="国际版-个人版-家庭版"><a href="#国际版-个人版-家庭版" class="headerlink" title="国际版, 个人版(家庭版)"></a>国际版, 个人版(家庭版)</h4><p><a href="https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All" target="_blank" rel="noopener">https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p>
<h4 id="中国版-世纪互联"><a href="#中国版-世纪互联" class="headerlink" title="中国版(世纪互联)"></a>中国版(世纪互联)</h4><p><a href="https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All" target="_blank" rel="noopener">https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&amp;response_type=code&amp;redirect_uri=http://localhost/onedrive-login&amp;response_mode=query&amp;scope=offline_access%20User.Read%20Files.ReadWrite.All</a></p>
<h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 国际版</span><br><span class="line">OneList -a &quot;url&quot; -s &quot;&#x2F;onedrive01&quot;</span><br><span class="line"># 个人版(家庭版)</span><br><span class="line">OneList -ms -a &quot;url&quot; -s &quot;&#x2F;onedrive02&quot;</span><br><span class="line"># 中国版(世纪互联)</span><br><span class="line">OneList -cn -a &quot;url&quot; -s &quot;&#x2F;onedrive03&quot;</span><br><span class="line"></span><br><span class="line"># 在浏览器地址栏中获取以 http:&#x2F;&#x2F;loaclhost 开头的整个url内容</span><br><span class="line"># 将获取的完整url内容替换命令中的 url 三个字母</span><br><span class="line"># 每次产生的 url 只能用一次, 重试请重新获取 url</span><br><span class="line"># 可以一个盘内的多个文件夹分别映射到多个&#96;SubPath&#96;上</span><br><span class="line"># 此操作将会自动添加的配置文件</span><br><span class="line"># 提示 Success! Add config. &#39;&#x2F;path&#x2F;to&#x2F;config.json&#39; 则成功</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是家庭版或者个人免费版, 此项应为 true.</span><br><span class="line">    &quot;MSAccount&quot;: false,</span><br><span class="line">    &#x2F;&#x2F; 如果是中国版(世纪互联), 此项应为 true.</span><br><span class="line">    &quot;MainLand&quot;: false,</span><br><span class="line">    &#x2F;&#x2F; 授权令牌</span><br><span class="line">    &quot;RefreshToken&quot;: &quot;1234564567890ABCDEF&quot;,</span><br><span class="line">    &#x2F;&#x2F; 单配置文件中,此项要唯一.将此OneDrive中设置为&#96;RootPath&#96;目录映射在&#96;http:&#x2F;&#x2F;127.0.0.1:5288&#x2F;onedrive&#96; 下.</span><br><span class="line">    &#x2F;&#x2F; (只推荐一个盘位的时候使用根目录&quot;&#x2F;&quot;.)</span><br><span class="line">    &quot;SubPath&quot;: &quot;&#x2F;onedrive&quot;,</span><br><span class="line">    &#x2F;&#x2F; 读取OneDrive的某个目录作为根目录. (支持根目录&quot;&#x2F;&quot;)</span><br><span class="line">    &quot;RootPath&quot;: &quot;&#x2F;Test&quot;,</span><br><span class="line">    &#x2F;&#x2F; 隐藏OneDrive目录中的文件夹和文件, 条目间使用 &quot;|&quot; 分割. (跳过缓存设置的条目.)</span><br><span class="line">    &quot;HidePath&quot;: &quot;&#x2F;Test&#x2F;Obj01|&#x2F;Test&#x2F;Obj02&quot;,</span><br><span class="line">    &#x2F;&#x2F; 使用用户名和密码加密OneDrive目录. 目录和用户名密码间使用 &quot;?&quot; 分割, 用户名密码使用 &quot;:&quot; 分割, 条目间使用 &quot;|&quot; 分割. 无效条目将跳过. </span><br><span class="line">    &quot;AuthPath&quot;: &quot;&#x2F;Test&#x2F;Auth01?user01:pwd01|&#x2F;Test&#x2F;Auth02?user02:pwd02&quot;,</span><br><span class="line">    &#x2F;&#x2F; 缓存刷新间隔.(所有项目中的刷新时间取最小值为有效刷新间隔)</span><br><span class="line">    &quot;RefreshInterval&quot;: 900</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage of OneList:</span><br><span class="line">  -a string</span><br><span class="line">        &#x2F;&#x2F; 初始化配置文件,添加新配置</span><br><span class="line">        Setup and Init auth.json.</span><br><span class="line">  -bind string</span><br><span class="line">        &#x2F;&#x2F; 绑定IP地址(公网: 0.0.0.0)</span><br><span class="line">        Bind Address (default &quot;127.0.0.1&quot;)</span><br><span class="line">  -port string</span><br><span class="line">        &#x2F;&#x2F; 绑定端口(HTTP:80)</span><br><span class="line">        Port (default &quot;5288&quot;)</span><br><span class="line">  -s string</span><br><span class="line">        &#x2F;&#x2F; 设置 SubPath 项, 需要与 -a 一起使用.</span><br><span class="line">        Set SubPath. [unique per account] (default &quot;&#x2F;&quot;)</span><br><span class="line">  -c string</span><br><span class="line">        &#x2F;&#x2F; 配置文件</span><br><span class="line">        Config file. (default &quot;config.json&quot;)</span><br><span class="line">  -t string</span><br><span class="line">        &#x2F;&#x2F; Index.html 目录样式文件</span><br><span class="line">        Index file. (default &quot;index.html&quot;)</span><br><span class="line">  -json</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 数据以 json 形式输出当前目录数据</span><br><span class="line">        Output json.</span><br><span class="line">  -cn</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权中国版(世纪互联), 需要此参数.</span><br><span class="line">        OneDrive by 21Vianet.</span><br><span class="line">  -ms</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权个人版(家庭版), 需要此参数.</span><br><span class="line">        OneDrive by Microsoft.</span><br><span class="line">  -C string</span><br><span class="line">        &#x2F;&#x2F; 覆写所有预置的 Client ID. (不建议新手使用此参数)</span><br><span class="line">        Set  Client ID. [Overwrite all clientId]</span><br><span class="line">  -S string</span><br><span class="line">        &#x2F;&#x2F; 覆写所有预置的 Secret Key. (不建议新手使用此参数)</span><br><span class="line">        Set Secret Key. [Overwrite all secretKey]</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 保证 config.json 和 index.html 同目录, 直接运行.</span><br><span class="line">$ OneList</span><br><span class="line"># 监听公网 80 端口</span><br><span class="line">$ OneList -bind 0.0.0.0 -port 80</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>在初次缓存过程中或者打开空文件夹, 会提示 No Found.</li>
<li>请使用 UTF-8 编码模式手动编辑 config.json 文件.</li>
</ul>
<h2 id="Nginx-反代配置"><a href="#Nginx-反代配置" class="headerlink" title="Nginx 反代配置"></a>Nginx 反代配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ^~ &#x2F;onedrive&#x2F; &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:5288;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Client-Secret-2299-12-31"><a href="#Client-Secret-2299-12-31" class="headerlink" title="Client/Secret (~ 2299/12/31)"></a>Client/Secret (~ 2299/12/31)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 国际版: 78d4dc35-7e46-42c6-9023-2d39314433a5| ZudGl-p.m&#x3D;LMmr3VrKgAyOf-WevB3p50</span><br><span class="line"># 中国版: dfe36e60-6133-48cf-869f-4d15b8354769| H0-1:6.Sb8:WCW&#x2F;J-c]K@fddCt[i0EZ2</span><br><span class="line"># ReplyURL: http:&#x2F;&#x2F;localhost&#x2F;onedrive-login</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>onelist</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实用教程之__getattr__等标识符的用法</title>
    <url>/2020/03/16/Python%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B%E4%B9%8B__getattr__%E7%AD%89%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>在使用Python的过程中可能遇到以下几个函数：</p>
<ul>
<li><code>getattr</code></li>
<li><code>__getattr__</code></li>
<li><code>__getattribute__</code></li>
<li><code>__get__</code></li>
</ul>
<p>如何区别他们，如何在编程中正确使用他们呢？</p>
<a id="more"></a>

<h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h3><p><code>getattr (object, name[, default])</code>是Python的内置函数之一，它的作用是获取对象的属性。</p>
<ul>
<li>object 对象</li>
<li>name 属性名</li>
<li>default 当属性不存在时，返回的默认值</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x = x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Foo(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">'x'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.x</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(f, <span class="string">'y'</span>, <span class="string">'bar'</span>)</span><br><span class="line"><span class="string">'bar'</span></span><br></pre></td></tr></table></figure>

<h3 id="getattr-1"><a href="#getattr-1" class="headerlink" title="_ __getattr _ __"></a>_ __getattr _ __</h3><p><code>object. __getattr__(self, name)</code>是一个对象方法，如果找不到对象的属性时会调用这个方法。</p>
<p>这个方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>注意，如果通过正常机制能找到对象属性的话，不会调用<code>__getattr__</code>方法。</p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, bamf)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.bamf = bamf</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Frob does not have `&#123;&#125;` attribute.'</span>.format(str(name))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob(<span class="string">"bamf"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bar</span><br><span class="line"><span class="string">'Frob does not have `bar` attribute.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line"><span class="string">'bamf'</span></span><br></pre></td></tr></table></figure>

<h3 id="getattribute"><a href="#getattribute" class="headerlink" title="____  getattribute __ __"></a>____  getattribute __ __</h3><p>当访问 某个对象的属性时，会无条件的调用这个方法。这个方法只适用于新式类。<br> 新式类就是集成自object或者type的类。</p>
<p>如果类还同时定义了<code>__getattr__()</code>方法，则不会调用<code>__getattr__()</code>方法，除非在<code>__getattribute__()</code>方法中显示调用<code>__getattr__()</code>或者抛出了<code>AttributeError</code>。</p>
<p>该方法应该返回属性值或者抛出<code>AttributeError</code>异常。</p>
<p>为了避免在方法中出现无限递归的情况，应该总是使用基类的方法来获取属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>object.__getattribute__(self, name).</span><br></pre></td></tr></table></figure>

<p>语法：<code>object. __getattribute__(self, name)</code></p>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Frob</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">"getting `&#123;&#125;`"</span>.format(str(name))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> object.__getattribute__(self, name)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Frob()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bamf</span><br><span class="line">getting `bamf`</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="get"><a href="#get" class="headerlink" title="____ __ get __"></a>____ __ get __</h3><p><code>__get__()</code>方法是描述符方法之一。描述符用于将访问对象属性转变成调用描述符方法。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"get value=%s"</span> % self.val </span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"set value=%s"</span> % val</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span><span class="params">(object)</span>:</span></span><br><span class="line">    age = Descriptor()</span><br><span class="line"></span><br><span class="line">stu = Stu()</span><br><span class="line">stu.age = <span class="number">12</span>    <span class="comment"># set value=12</span></span><br><span class="line"><span class="keyword">print</span> stu.age   <span class="comment"># get value=12</span></span><br><span class="line">                <span class="comment"># 12</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实用教程之下划线命名模式</title>
    <url>/2020/03/16/Python%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%8B%E5%88%92%E7%BA%BF%E5%91%BD%E5%90%8D%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>直接上表格。</p>
<table>
<thead>
<tr>
<th align="center">命名模式</th>
<th align="center">举例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单前导下划线</td>
<td align="center">_var</td>
<td>命名约定，仅供内部使用。通常不会由Python解释器内部执行（通配符导入除外），只作为对程序员的提示。通配符导入时，_var代表的<strong>属性</strong>或者<strong>函数</strong>不会被导入。</td>
</tr>
<tr>
<td align="center">单末尾下划线</td>
<td align="center">var_</td>
<td>按照约定使用避免与Python关键字的命名冲突。</td>
</tr>
<tr>
<td align="center">双前导下划线</td>
<td align="center">__var</td>
<td>当在类上下文使用时，触发名称修饰，由Python解释器强制执行。<br /><strong>Tips：</strong>可以理解为Python对象的<strong>私有属性</strong>。仅供<strong>Python内部成员函数</strong>使用。</td>
</tr>
<tr>
<td align="center">双前导和双末尾下划线</td>
<td align="center">_<em>var_</em></td>
<td>表示Python语言定义的特殊方法，避免在你自己的属性中使用这种特殊方法。</td>
</tr>
<tr>
<td align="center">单下划线</td>
<td align="center">_</td>
<td>有时用作临时或者不关心的变量名称，也表示<strong>Python REPL</strong>最近的一个表达式的结果。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据存储之pickle模块的使用</title>
    <url>/2020/03/04/Python%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8Bpickle%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>废话不多说，直接上代码。</p>
<a id="more"></a>

<h5 id="把变量写入文件"><a href="#把变量写入文件" class="headerlink" title="把变量写入文件"></a>把变量写入文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data = <span class="string">"I am a boy."</span></span><br><span class="line">file = open(<span class="string">'data.pkl'</span>, <span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(data, file, [protocol])</span><br><span class="line"><span class="comment">#data----变量名称</span></span><br><span class="line"><span class="comment">#file----文件指针</span></span><br><span class="line"><span class="comment">#protocol----序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本</span></span><br></pre></td></tr></table></figure>

<h5 id="从文件中读取变量"><a href="#从文件中读取变量" class="headerlink" title="从文件中读取变量"></a>从文件中读取变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">'data.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line">data = pickle.load(file)</span><br></pre></td></tr></table></figure>



<h5 id="With-open函数打开文件的各种方式"><a href="#With-open函数打开文件的各种方式" class="headerlink" title="With open函数打开文件的各种方式"></a>With open函数打开文件的各种方式</h5><table>
<thead>
<tr>
<th><strong>type</strong></th>
<th>info</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python教程</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python深度学习之PyTorch学习小记录</title>
    <url>/2020/03/05/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BPyTorch%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>不说废话，直接上教程。</p>
<a id="more"></a>

<h5 id="1-torch-Tensor和torch-tensor有什么区别？"><a href="#1-torch-Tensor和torch-tensor有什么区别？" class="headerlink" title="1.torch.Tensor和torch.tensor有什么区别？"></a>1.torch.Tensor和torch.tensor有什么区别？</h5><h6 id="1-1介绍"><a href="#1-1介绍" class="headerlink" title="1.1介绍"></a>1.1介绍</h6><p>​    在PyTorch 中，torch.Tensor是主要的tensor类，所有的tensor都是torch.Tensor的实例。torch.Tensor是torch.FloatTensor的别名。<br>而torch.tensor是一个函数，返回的是一个tensor，在PyTorch官方文档中，描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(data, dtype=<span class="literal">None</span>, device=<span class="literal">None</span>, requires_grad=<span class="literal">False</span>) → Tensor</span><br><span class="line">Constructs a tensor <span class="keyword">with</span> data.</span><br></pre></td></tr></table></figure>

<h6 id="1-2区别1"><a href="#1-2区别1" class="headerlink" title="1.2区别1"></a>1.2区别1</h6><p><code>torch.Tensor(data)</code>是将输入的data转化<code>torch.FloatTensor</code></p>
<p><code>torch.tensor(data)</code>(当你未指定<code>dype</code>的类型时)是将data转化为<code>torch.FloatTensor、torch.LongTensor、torch.DoubleTensor</code>等类型，转化类型依据于<code>data</code>的类型或者<code>dtype</code>的值</p>
<h5 id="1-3区别2"><a href="#1-3区别2" class="headerlink" title="1.3区别2"></a>1.3区别2</h5><p>使用如下语句：<code>tensor_without_data = torch.Tensor()</code>可以创建一个空的<code>FloatTensor</code>，而当你使用<code>tensor_without_data = torch.tensor()</code>时候则会报错：</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-12</span>-ebc3ceaa76d2&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 torch.tensor()</span><br><span class="line"></span><br><span class="line">TypeError: tensor() missing <span class="number">1</span> required positional arguments: <span class="string">"data"</span></span><br></pre></td></tr></table></figure>

<p>当你想要创建一个空的<code>tensor</code>时候，可以使用如下的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor_without_data = torch.Tensor() <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.tensor(()) <span class="comment"># tensor([])</span></span><br><span class="line">tensor_without_data = torch.empty([]) <span class="comment"># tensor(0.)</span></span><br></pre></td></tr></table></figure>


<p>所以<code>torch.Tensor</code>应该说是同时具有<code>torch.tensor</code>和<code>torch.empty</code>的功能，但是使用<code>torch.Tensor</code>可能会使你的代码出错，所以最好还是使用<code>torch.tensor</code>和<code>torch.empty</code>，而不是<code>torch.Tensor</code>。</p>
]]></content>
      <tags>
        <tag>Python深度学习</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python深度学习之深入浅出LSTM</title>
    <url>/2020/03/16/Python%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BALSTM/</url>
    <content><![CDATA[<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=deflault"></script>

<p>什么是LSTM？</p>
<a id="more"></a>

<h4 id="1-LSTM是什么"><a href="#1-LSTM是什么" class="headerlink" title="1.LSTM是什么"></a>1.LSTM是什么</h4><p>LSTM 即 Long Short Term 网络——一般就叫做LSTM——是一种特殊的RNN，可以学习长期依赖信息。LSTM由 <em>Hochreiter &amp; Schmidhuber</em> (1997) 提出， 并被 <em>Alex Graves</em> 进行了改良和推广。在很多问题，LSTM 都取得了相当巨大的成功，并得到了广泛的使用。</p>
<p>LSTM 通过刻意的设计来避免长期依赖问题。记住长期的信息是 LSTM 的默认行为，而非需要付出很大代价才能获得的能力。</p>
<p>所有的 RNN都具有一种重复神经网络模块的链式的形式，在标准的RNN中，这个重复的模块只有一个非常简单的结构，例如一个 <em>tanh</em> 层。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181722_450.png" alt=""></p>
<blockquote>
<p>上图即<strong>标准RNN中</strong>重复模块包含单一的层</p>
</blockquote>
<p>LSTM同样是这样的结构，但是重复的模块拥有一个不同的结构。不同于单一神经网络层，这里有四个，以一种非常特殊的方式进行交互。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181722_631.png" alt=""></p>
<blockquote>
<p>上图即<strong>LSTM</strong>中的重复模块包含的四个交互的层</p>
</blockquote>
<p>我们会一步一步的剖析LSTM解析图。现在，我们先来熟悉一下途中使用的各种元素的图标。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181722_777.png" alt=""></p>
<blockquote>
<p>LSTM中的图标</p>
</blockquote>
<p>在上面的图例中，每一条黑线传输着一整个向量，从一个节点的输出到其他节点的输入。粉色的圈代表 <em>pointwise</em> (逐点的)操作，诸如向量的和，而黄色的矩阵就是学习到的神经网络层。合在一起的线表示向量的连接，分开的线表示内容被复制，然后分发到不同的位置。</p>
<h4 id="2-LSTM核心内容"><a href="#2-LSTM核心内容" class="headerlink" title="2.LSTM核心内容"></a>2.LSTM核心内容</h4><p>LSTM的关键就是细胞状态（cell），水平线在图上方贯穿运行，细胞状态类似于传送带，直接在整个链上运行，只有一些少量的线性交互，信息在上面流传保持不变会很容易。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181723_640.png" alt=""></p>
<p>LSTM 有通过精心设计的称作”<strong>门</strong>“的结构来去除或者增加信息到细胞状态的能力。门是一种让信息选择式通过的方法。他们包含一个 <em>sigmoid</em> 神经网络层和一个 <em>pointwise</em> 乘法操作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181723_567.png" alt=""></p>
<p><em>sigmoid</em> 层输出 0 到 1 之间的数值，描述每个部分有多少量可以通过。0 代表”不允许任何量通过”，1 就指”允许任何量通过”。</p>
<p>LSTM有三个门，来保护和控制细胞状态。</p>
<h4 id="3-逐步理解LSTM"><a href="#3-逐步理解LSTM" class="headerlink" title="3.逐步理解LSTM"></a>3.逐步理解LSTM</h4><p>LSTM中第一步是决定会从细胞状态中丢弃什么信息。这个决定通过一个称为 <strong>忘记门层</strong> 的门来完成。该门会读取 \(h_{t-1}\) 和 \(x_{t}\) ，输出一个在 0 到 1 之间的数值给每个在细胞状态中的数字。1 表示”完全保留”，0 代表”完全舍弃”。</p>
<p>让我们回到 <strong>语言模型</strong> 的例子中来基于已经看到的词预测下一个词。在这个问题中，细胞状态可能包含当前 <strong>主语</strong> 的类别，因此正确的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> 可以被选择出来。当我们看到新的 <strong>代词</strong> ，我们希望忘记旧的 <strong>代词</strong>。</p>
<p><img src="C:%5CUsers%5Cwf09%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C20150829181723_259.png" alt=""></p>
<h5 id="3-1决定丢弃信息"><a href="#3-1决定丢弃信息" class="headerlink" title="3.1决定丢弃信息"></a>3.1决定丢弃信息</h5><p>下一步是确定什么样的新信息被存放在细胞状态中。这里包含两部分。第一，<em>sigmoid</em> 层称 “输入门层” 决定什么值我们将要更新。然后，一个 <em>tanh</em> 层创建一个一个新的候选值向量，\(\tilde{C_{t}}\)，会被加入到状态中。下一步，我们会将这两个信息来产生对状态的更新。</p>
<p>在我们 <strong>语言模型</strong> 的例子中，我们希望增加新的 <strong>代词</strong> 的类别到细胞状态中，来替代旧的需要忘记的 <strong>代词</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181723_897.png" alt=""></p>
<h5 id="3-2确定更新的信息"><a href="#3-2确定更新的信息" class="headerlink" title="3.2确定更新的信息"></a>3.2确定更新的信息</h5><p>现在是更新旧细胞状态的时间了，\(C_{t-1}\) 更新为 \(C_{t}\)</p>
<p>我们把旧状态与 \(f_t\) 相乘，丢弃掉确定丢弃的信息，接着加上 \(i_t * \tilde{C}_t\) ，这就是新的候选值。</p>
<p>在 <strong>语言模型</strong> 的例子中，这就是我们实际根据前面确定的目标，丢弃 <strong>旧代词</strong> 的类别信息并添加新的信息的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181723_883.png" alt=""></p>
<h5 id="3-3更新细胞状态"><a href="#3-3更新细胞状态" class="headerlink" title="3.3更新细胞状态"></a>3.3更新细胞状态</h5><p>最终，我们需要确定输出什么值，这个输出将会基于我们的细胞状态，但是也是一个过滤后的版本。首先，我们运行一个 <em>sigmoid</em> 层来确定细胞状态的哪个部分将输出出去。接着，我们把细胞状态通过 <em>tanh</em> 进行处理，得到一个在 -1 到 1 之间的值，并将它和 sigmoid 门的输出相乘，最终我们仅仅会输出我们确定输出的那部分。</p>
<p>在 <strong>语言模型</strong> 的例子中，因为他就看到了一个  <strong>代词</strong> ，可能需要输出一个 <strong>代词</strong> 相关的信息。例如，可能输出是否代词是单数还是负数。如果是 <strong>动词</strong> 的话，我们也他要知道 <strong>动词</strong> 需要进行的词形变化。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20150829181723_463.png" alt=""></p>
]]></content>
      <tags>
        <tag>Python深度学习</tag>
        <tag>pytorch</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04更换镜像源</title>
    <url>/2019/01/06/Ubuntu18.04%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h4 id="Ubuntu18-04更换镜像源"><a href="#Ubuntu18-04更换镜像源" class="headerlink" title="Ubuntu18.04更换镜像源"></a>Ubuntu18.04更换镜像源</h4><h5 id="1-备份原有镜像源"><a href="#1-备份原有镜像源" class="headerlink" title="1.备份原有镜像源"></a>1.备份原有镜像源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sourses.list.bak</span><br></pre></td></tr></table></figure>

<h5 id="2-修改-etc-apt-sources-list文件"><a href="#2-修改-etc-apt-sources-list文件" class="headerlink" title="2.修改/etc/apt/sources.list文件"></a>2.修改/etc/apt/sources.list文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#香港中文科技大学源</span></span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-security main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-updates main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-proposed main restricted universe </span><br><span class="line">deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ bionic-backports main restricted universe</span><br></pre></td></tr></table></figure>

<h5 id="3-其他相关命令"><a href="#3-其他相关命令" class="headerlink" title="3.其他相关命令"></a>3.其他相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Ubuntu18.04</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装nodejs并更改npm镜像源</title>
    <url>/2019/01/06/Ubuntu%E5%AE%89%E8%A3%85nodejs/</url>
    <content><![CDATA[<h4 id="Ubuntu安装nodejs并更改npm镜像源"><a href="#Ubuntu安装nodejs并更改npm镜像源" class="headerlink" title="Ubuntu安装nodejs并更改npm镜像源"></a>Ubuntu安装nodejs并更改npm镜像源</h4><p>由于众所周知的原因，在国内使用原有的源安装<code>nodejs</code>速度非常缓慢，故可以采用清华大学的源</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo bash</span><br></pre></td></tr></table></figure>

<h5 id="编辑-etc-apt-sources-list-d-nodesource-list"><a href="#编辑-etc-apt-sources-list-d-nodesource-list" class="headerlink" title="编辑 /etc/apt/sources.list.d/nodesource.list"></a>编辑 /etc/apt/sources.list.d/nodesource.list</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://deb.nodesource.com/node_12.x xenial main</span><br><span class="line">deb-src https://deb.nodesource.com/node_12.x xenial main</span><br></pre></td></tr></table></figure>

<h5 id="更改为："><a href="#更改为：" class="headerlink" title="更改为："></a>更改为：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_12.x xenial main</span><br></pre></td></tr></table></figure>

<h5 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get clean</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nodejs</span><br></pre></td></tr></table></figure>

<h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h5 id="更换npm源"><a href="#更换npm源" class="headerlink" title="更换npm源"></a>更换npm源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h5 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h5 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装php指南</title>
    <url>/2019/01/07/Ubuntu%E5%AE%89%E8%A3%85php%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h4 id="Ubuntu安装php指南"><a href="#Ubuntu安装php指南" class="headerlink" title="Ubuntu安装php指南"></a>Ubuntu安装php指南</h4><p>由于自带的apt源中不包含php，所以在安装php之前需要给apt添加第三方源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line"><span class="comment">#sudo add-apt-repository -r ppa:ondrej/php              #删除</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y php7.3</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux运维</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>caddy一键安装管理脚本</title>
    <url>/2019/12/31/caddy%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>caddy一键安装管理脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.coding.net/p/caddyserver/d/caddyserver/git/raw/master/web.sh</span><br><span class="line">chmod +x web.sh</span><br><span class="line">mv web.sh /usr/<span class="built_in">local</span>/bin/web</span><br></pre></td></tr></table></figure>

<p>caddy 相关命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">web install         <span class="comment">#安装</span></span><br><span class="line">web <span class="built_in">help</span>            <span class="comment">#帮助</span></span><br></pre></td></tr></table></figure>

<p>注意：安装之前要先安装zip用来解压软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install zip</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>caddy</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc编译错误处理</title>
    <url>/2020/04/07/gcc%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><strong>完整错误信息如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main.c:(.text+0x31): undefined reference to sqrt&#39; 3.c:(.text+0x66): undefined reference to sqrt</span><br><span class="line"> collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>

<p>很明显这是一个链接错误。解决方法是gcc编译时在指令后加-lm参数，使它可以找到相应库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc main.c -o main -lm</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>screen会话管理器用法</title>
    <url>/2019/03/06/linux%20screen%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h5 id="screen-会话管理器用法"><a href="#screen-会话管理器用法" class="headerlink" title="screen 会话管理器用法"></a>screen 会话管理器用法</h5><a id="more"></a>

<p><strong>一、背景</strong></p>
<p>系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。</p>
<p><strong>二、简介</strong></p>
<p><strong>GNU Screen</strong>是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<p>GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>
<ul>
<li><strong>会话恢复</strong></li>
</ul>
<ul>
<li><strong>多窗口</strong></li>
</ul>
<ul>
<li><strong>会话共享</strong></li>
</ul>
<p>GNU’s Screen 官方站点：<a href="http://www.gnu.org/software/screen/" target="_blank" rel="noopener">http://www.gnu.org/software/screen/</a></p>
<p><strong>三、语法</strong></p>
<p># screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</p>
<p><strong>参数说明</strong></p>
<p>-A 　将所有的视窗都调整为目前终端机的大小。<br>-d &lt;作业名称&gt; 　将指定的screen作业离线。<br>-h &lt;行数&gt; 　指定视窗的缓冲区行数。<br>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。<br>-r &lt;作业名称&gt; 　恢复离线的screen作业。<br>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。<br>-s 　指定建立新视窗时，所要执行的shell。<br>-S &lt;作业名称&gt; 　指定screen作业的名称。<br>-v 　显示版本信息。<br>-x 　恢复之前离线的screen作业。<br>-ls或–list 　显示目前所有的screen作业。<br>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</p>
<p><strong>四、常用screen参数</strong></p>
<p>screen -S yourname -&gt; 新建一个叫yourname的session<br>screen -ls -&gt; 列出当前所有的session<br>screen -r yourname -&gt; 回到yourname这个session<br>screen -d yourname -&gt; 远程detach某个session<br>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</p>
<p><strong>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。</strong><br>C-a ? -&gt; 显示所有键绑定信息<br>C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口<br>C-a n -&gt; Next，切换到下一个 window<br>C-a p -&gt; Previous，切换到前一个 window<br>C-a 0..9 -&gt; 切换到第 0..9 个 window<br>Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9<br>C-a C-a -&gt; 在两个最近使用的 window 间切换<br>C-a x -&gt; 锁住当前的 window，需用用户密码解锁<br>C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。<br>C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。<br>C-a w -&gt; 显示所有窗口列表<br>C-a t -&gt; Time，显示当前时间，和系统的 load<br>C-a k -&gt; kill window，强行关闭当前的 window<br>C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样<br>  C-b Backward，PageUp<br>  C-f Forward，PageDown<br>  H(大写) High，将光标移至左上角<br>  L Low，将光标移至左下角<br>  0 移到行首<br>  $ 行末<br>  w forward one word，以字为单位往前移<br>  b backward one word，以字为单位往后移<br>  Space 第一次按为标记区起点，第二次按为终点<br>  Esc 结束 copy mode<br>C-a ] -&gt; Paste，把刚刚在 copy mode 选定的内容贴上</p>
<p><strong>五、使用 screen</strong></p>
<p><strong>5.1 安装screen</strong></p>
<p>流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# yum install screen</span><br><span class="line">[root@TS-DEV ~]# rpm -qa|grep screen</span><br><span class="line">screen-4.0.3-4.el5</span><br><span class="line">[root@TS-DEV ~]#</span><br></pre></td></tr></table></figure>

<p><strong>5.2 创建一个新的窗口</strong></p>
<p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -S david</span><br></pre></td></tr></table></figure>

<p>screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen vi david.txt</span><br></pre></td></tr></table></figure>

<p>screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。</p>
<p><strong>5.3 查看窗口和窗口名称</strong></p>
<p>打开多个窗口后，可以使用快捷键C-a w列出当前所有窗口。如果使用文本终端，这个列表会列在屏幕左下角，如果使用X环境下的终端模拟器，这个列表会列在标题栏里。窗口列表的样子一般是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0$ bash  1-$ bash  2*$ bash</span><br></pre></td></tr></table></figure>

<p>这个例子中我开启了三个窗口，其中*号表示当前位于窗口2，-号表示上一次切换窗口时位于窗口1。</p>
<p>Screen默认会为窗口命名为编号和窗口中运行程序名的组合，上面的例子中窗口都是默认名字。练习了上面查看窗口的方法，你可能就希望各个窗口可以有不同的名字以方便区分了。可以使用快捷键C-a A来为当前窗口重命名，按下快捷键后，Screen会允许你为当前窗口输入新的名字，回车确认。</p>
<p><strong>5.4 会话分离与恢复</strong></p>
<p>你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/david.txt文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen vi &#x2F;tmp&#x2F;david.txt</span><br></pre></td></tr></table></figure>

<p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入<code>C-a d</code>，Screen会给出detached提示：</p>
<p><strong>暂时中断会话</strong></p>
<p><img src="https://images0.cnblogs.com/blog/370046/201301/29144351-ff7e78c079a44f51ae44d48b6942b87f.jpg" alt="img"></p>
<p>半个小时之后回来了，找到该screen会话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -ls</span><br></pre></td></tr></table></figure>

<p><img src="https://images0.cnblogs.com/blog/370046/201301/29144759-7cea9fc3f5f4481ab21df8bd017c88ef.jpg" alt="img"></p>
<p>重新连接会话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -r 12865</span><br></pre></td></tr></table></figure>

<p>一切都在。</p>
<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。</p>
<p>这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：</p>
<p><img src="https://images0.cnblogs.com/blog/370046/201301/29215655-6d2f0c7e7f294756a4b40a40e1e76a84.jpg" alt="img"></p>
<p><strong>5.5 清除dead 会话</strong></p>
<p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</p>
<p><img src="https://images0.cnblogs.com/blog/370046/201301/29154746-51185199905542c68d3c3b46dddef648.jpg" alt="img"></p>
<p><strong>5.6 关闭或杀死窗口</strong></p>
<p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>
<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>
<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些。</p>
<p><strong>六、screen 高级应用</strong> </p>
<p><strong>6.1 会话共享</strong></p>
<p>还有一种比较好玩的会话恢复，可以实现会话共享。假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -x</span><br></pre></td></tr></table></figure>

<p>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的。</p>
<p><strong>6.2 会话锁定与解锁</strong></p>
<p>Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。</p>
<p>也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>
<p><strong>6.3 发送命令到screen会话</strong></p>
<p>在Screen会话之外，可以通过screen命令操作一个Screen会话，这也为使用Screen作为脚本程序增加了便利。关于Screen在脚本中的应用超出了入门的范围，这里只看一个例子，体会一下在会话之外对Screen的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -S sandy -X screen ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p>这个命令在一个叫做sandy的screen会话中创建一个新窗口，并在其中运行ping命令。</p>
<p><strong>6.4 屏幕分割</strong></p>
<p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a <tab>在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</p>
<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它。</p>
<p><img src="https://images0.cnblogs.com/blog/370046/201301/29205553-38cdde403beb45f4814ca9a180987a9e.jpg" alt="img"></p>
<p><strong>6.5 C/P模式和操作</strong></p>
<p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a <Esc>或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</p>
<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口。</p>
<p><img src="https://images0.cnblogs.com/blog/370046/201301/29210355-9026652834d446d2bbafa18fd7bca276.jpg" alt="img"></p>
<p><strong>6.6 更多screen功能</strong></p>
<p>同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>
<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg…）命令，你可以灵活配置其他用户访问你的screen会话。更多配置文件内容请参考screen的man页。</p>
<p><strong>6.7 解决screen状态为Attached连上不的问题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br><span class="line">screen -D -r ＜session-id&gt;</span><br></pre></td></tr></table></figure>

<p>解释：-D -r 先踢掉前一用户，再登陆。</p>
]]></content>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器重装</title>
    <url>/2019/01/05/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E8%A3%85/</url>
    <content><![CDATA[<h5 id="Linux服务器重装"><a href="#Linux服务器重装" class="headerlink" title="Linux服务器重装"></a>Linux服务器重装</h5><a id="more"></a>

<h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Debian&#x2F;Ubuntu</span><br><span class="line">apt-get install -y xz-utils openssl gawk file</span><br><span class="line">#RedHat&#x2F;CentOS</span><br><span class="line">yum install -y xz openssl gawk file</span><br></pre></td></tr></table></figure>

<h4 id="2-下载脚本"><a href="#2-下载脚本" class="headerlink" title="2.下载脚本"></a>2.下载脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O InstallNET.sh https://fly97.fun/files/git/InstallNET/InstallNET.sh</span><br></pre></td></tr></table></figure>

<h4 id="3-运行命令："><a href="#3-运行命令：" class="headerlink" title="3.运行命令："></a>3.运行命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash InstallNET.sh -c 6.9 -v 64 -a --mirror <span class="string">'http://mirror.centos.org/centos'</span></span><br><span class="line">bash InstallNET.sh -u 16.04 -v 64 -a -mirror <span class="string">'http://mirrors.aliyun.com/ubuntu/'</span></span><br></pre></td></tr></table></figure>

<h4 id="4-用户名以及密码："><a href="#4-用户名以及密码：" class="headerlink" title="4.用户名以及密码："></a>4.用户名以及密码：</h4><p><code>root@MoeClub.org</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Office Tool Plus使用教程</title>
    <url>/2020/05/11/office%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Office Tool Plus 使用教程</p>
<a id="more"></a>

<p>软件介绍：<a href="https://otp.landian.vip/zh-cn/" target="_blank" rel="noopener">https://otp.landian.vip/zh-cn/</a></p>
<p>软件下载地址：<a href="https://download.coolhub.top/" target="_blank" rel="noopener">https://download.coolhub.top/</a></p>
<p>备份地址：<a href="https://ftp.fly97.cn/windows/app/Office%20Tool%20v7.5.zip" target="_blank" rel="noopener">https://ftp.fly97.cn/windows/app/Office%20Tool%20v7.5.zip</a></p>
<h4 id="1-选择安装产品"><a href="#1-选择安装产品" class="headerlink" title="1.选择安装产品"></a>1.选择安装产品</h4><p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200517194431639.png" alt="image-20200517194431639"></p>
<p>注意：由于国内到微软的网络不稳定，建议<strong>部署模式</strong>选择<strong>下载后安装</strong>。耐心等待安装完毕即可。</p>
<h4 id="2-激活office"><a href="#2-激活office" class="headerlink" title="2.激活office"></a>2.激活office</h4><p>首先，根据选择的类型选择对应的许可证。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200517194323507.png" alt="image-20200517194323507"></p>
<p><del>然后，选择<strong>零售版</strong>安装的同学<strong>可能需要安装</strong>Office2019专业版特定的密钥：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</span><br></pre></td></tr></table></figure>

<p>最后，选择对应的KMS服务器。</p>
<p>推荐使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kms.moeclub.org</span><br></pre></td></tr></table></figure>

<p>完。</p>
]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>python实用教程之re正则表达式匹配</title>
    <url>/2020/04/30/python%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B%E4%B9%8Bre%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h4 id="1-正则表达式全集"><a href="#1-正则表达式全集" class="headerlink" title="1.正则表达式全集"></a>1.正则表达式全集</h4><a id="more"></a>

<table>
<thead>
<tr>
<th>字符</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td>
</tr>
<tr>
<td><strong>^</strong></td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td>
</tr>
<tr>
<td><strong>$</strong></td>
<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td>
</tr>
<tr>
<td>*****</td>
<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>
</tr>
<tr>
<td><strong>+</strong></td>
<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>
</tr>
<tr>
<td><strong>?</strong></td>
<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>
</tr>
<tr>
<td><strong>{n}</strong></td>
<td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>
</tr>
<tr>
<td><strong>{n,}</strong></td>
<td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o*</code>”。</td>
</tr>
<tr>
<td><strong>{n,m}</strong></td>
<td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td><strong>?</strong></td>
<td>当该字符紧跟在任何一个其他限制符（<em>,+,?，{*n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>匹配除“<code>\</code><em><code>n</code></em>”之外的任何单个字符。要匹配包括“<code>\</code><em><code>n</code></em>”在内的任何字符，请使用像“`(.</td>
</tr>
<tr>
<td><strong>(pattern)</strong></td>
<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td>
</tr>
<tr>
<td><strong>(?:pattern)</strong></td>
<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</td>
</tr>
<tr>
<td><strong>(?=pattern)</strong></td>
<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td>
</tr>
<tr>
<td><strong>(?!pattern)</strong></td>
<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</td>
</tr>
<tr>
<td><strong>(?&lt;=pattern)</strong></td>
<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。</td>
</tr>
<tr>
<td><strong>(?&lt;!pattern)</strong></td>
<td>反向否定预查，与正向否定预查类拟，只是方向相反。</td>
</tr>
<tr>
<td><strong>x|y</strong></td>
<td>匹配x或y</td>
</tr>
<tr>
<td><strong>[xyz]</strong></td>
<td>字符集合。匹配所包含的任意一个字符。</td>
</tr>
<tr>
<td><strong>[^xyz]</strong></td>
<td>负值字符集合。匹配未包含的任意字符。</td>
</tr>
<tr>
<td><strong>[a-z]</strong></td>
<td>字符范围。匹配指定范围内的任意字符。</td>
</tr>
<tr>
<td><strong>[^a-z]</strong></td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。</td>
</tr>
<tr>
<td><strong>\b</strong></td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td><strong>\B</strong></td>
<td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td><strong>\cx</strong></td>
<td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>
</tr>
<tr>
<td><strong>\d</strong></td>
<td>匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td><strong>\f</strong></td>
<td>匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td><strong>\s</strong></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>匹配任何非空白字符。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td><strong>\w</strong></td>
<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td><strong>\xn</strong></td>
<td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr>
<td><strong>\num</strong></td>
<td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n为一个八进制转义值。</td>
</tr>
<tr>
<td><strong>\nm</strong></td>
<td>标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果\</em>nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则\</em>nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr>
<td><strong>\nml</strong></td>
<td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
<tr>
<td><strong>\un</strong></td>
<td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td>
</tr>
</tbody></table>
<h4 id="2-常用正则表达式"><a href="#2-常用正则表达式" class="headerlink" title="2.常用正则表达式"></a>2.常用正则表达式</h4><table>
<thead>
<tr>
<th align="right">用户名</th>
<th>/^[a-z0-9_-]{3,16}$/</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><strong>密码</strong></td>
<td>/^[a-z0-9_-]{6,18}$/</td>
</tr>
<tr>
<td align="right"><strong>十六进制值</strong></td>
<td>/^#?([a-f0-9]{6}</td>
</tr>
<tr>
<td align="right"><strong>电子邮箱</strong></td>
<td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/<br/>/^[a-z\d]+(.[a-z\d]+)*@(<a href="-[\da-z]">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>
</tr>
<tr>
<td align="right"><strong>URL</strong></td>
<td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]<em>)</em>/?$/</td>
</tr>
<tr>
<td align="right"><strong>HTML 标签</strong></td>
<td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;</td>
</tr>
<tr>
<td align="right"><strong>删除代码\注释</strong></td>
<td>(?&lt;!http:|\S)//.*$</td>
</tr>
<tr>
<td align="right"><strong>Unicode编码中的汉字范围</strong></td>
<td>/^[\u2E80-\u9FFF]+$/</td>
</tr>
</tbody></table>
<h4 id="3-Python-中常用的正则表达式处理函数"><a href="#3-Python-中常用的正则表达式处理函数" class="headerlink" title="3.Python 中常用的正则表达式处理函数"></a>3.Python 中常用的正则表达式处理函数</h4><h5 id="re-match函数："><a href="#re-match函数：" class="headerlink" title="re.match函数："></a>re.match函数：</h5><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<p>函数语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags" target="_blank" rel="noopener">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>匹配成功re.match方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num=0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">print(re.match(<span class="string">'www'</span>, <span class="string">'www.runoob.com'</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.match(<span class="string">'com'</span>, <span class="string">'www.runoob.com'</span>))         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>以上实例输出结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<h5 id="re-search方法："><a href="#re-search方法：" class="headerlink" title="re.search方法："></a><strong>re.search方法：</strong></h5><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>函数语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>函数参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags" target="_blank" rel="noopener">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num=0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">print(re.search(<span class="string">'www'</span>, <span class="string">'www.runoob.com'</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.search(<span class="string">'com'</span>, <span class="string">'www.runoob.com'</span>).span())         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>以上实例运行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0, 3)</span><br><span class="line">(11, 14)</span><br></pre></td></tr></table></figure>

<h5 id="re-match与re-search的区别："><a href="#re-match与re-search的区别：" class="headerlink" title="re.match与re.search的区别："></a>re.match与re.search的区别：</h5><p>re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None，而 re.search 匹配整个字符串，直到找到一个匹配。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.match( <span class="string">r'dogs'</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"match --&gt; matchObj.group() : "</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"No match!!"</span>)</span><br><span class="line"> </span><br><span class="line">matchObj = re.search( <span class="string">r'dogs'</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"search --&gt; matchObj.group() : "</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"No match!!"</span>)</span><br></pre></td></tr></table></figure>

<p>以上实例运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No match!!</span><br><span class="line">search --&gt; matchObj.group() :  dogs</span><br></pre></td></tr></table></figure>

<h5 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h5><p>Python 的re模块提供了re.sub用于替换字符串中的匹配项。</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
<li>flags : 编译时用的匹配模式，数字形式。</li>
</ul>
<p>前三个为必选参数，后两个为可选参数。</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实例</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">"2004-959-559 # 这是一个电话号码"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除注释</span></span><br><span class="line">num = re.sub(<span class="string">r'#.*$'</span>, <span class="string">""</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"电话号码 : "</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 移除非数字的内容</span></span><br><span class="line">num = re.sub(<span class="string">r'\D'</span>, <span class="string">""</span>, phone)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"电话号码 : "</span>, num)</span><br></pre></td></tr></table></figure>

<p>以上实例执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">电话号码 :  <span class="number">2004</span><span class="number">-959</span><span class="number">-559</span> </span><br><span class="line">电话号码 :  <span class="number">2004959559</span></span><br></pre></td></tr></table></figure>

<p>若 repl 参数是一个函数：以下实例中将字符串中的匹配的数字乘于 2</p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘于 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(matched)</span>:</span></span><br><span class="line">    value = int(matched.group(<span class="string">'value'</span>))</span><br><span class="line">    <span class="keyword">return</span> str(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">'A23G4HFD567'</span></span><br><span class="line">print(re.sub(<span class="string">'(?P&lt;value&gt;\d+)'</span>, double, s))</span><br></pre></td></tr></table></figure>

<p>执行输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A46G8HFD1134</span><br></pre></td></tr></table></figure>

<h5 id="compile-函数"><a href="#compile-函数" class="headerlink" title="compile 函数"></a>compile 函数</h5><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<p>语法格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(pattern[, flags])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>pattern : 一个字符串形式的正则表达式</p>
</li>
<li><p>flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</p>
</li>
<li><ul>
<li><p>re.I 忽略大小写</p>
</li>
<li><p>re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</p>
</li>
<li><p>re.M 多行模式</p>
</li>
<li><p>re.S 即为’ . ‘并且包括换行符在内的任意字符（’ . ‘不包括换行符）</p>
</li>
<li><p>re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</p>
</li>
<li><p>re.X 为了增加可读性，忽略空格和’ # ‘后面的注释</p>
</li>
</ul>
</li>
</ul>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'\d+'</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从'e'的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从'1'的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print( m )                                        <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>在上面，当匹配成功时返回一个 Match 对象，其中：</p>
<ul>
<li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code>；</li>
<li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li>
<li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>
<li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code>。</li>
</ul>
<h5 id="findall函数："><a href="#findall函数：" class="headerlink" title="findall函数："></a><strong>findall函数</strong>：</h5><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p>
<p><strong>注意：</strong> match 和 search 是匹配一次 findall 匹配所有。</p>
<p>语法格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.findall(string[, pos[, endpos]])</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><strong>string</strong> 待匹配的字符串。</li>
<li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li>
<li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>
</ul>
<p>查找字符串中的所有数字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">'runoob 123 google 456'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'run88oob123google456'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure>

<h5 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a><strong>re.finditer</strong></h5><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags" target="_blank" rel="noopener">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">it = re.finditer(<span class="string">r"\d+"</span>,<span class="string">"12a32bc43jf3"</span>) </span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> it: </span><br><span class="line">    <span class="keyword">print</span> (match.group() )</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">32</span> </span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h5 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a><strong>re.split</strong></h5><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">maxsplit</td>
<td align="left">分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python3/python3-reg-expressions.html#flags" target="_blank" rel="noopener">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'\W+'</span>, <span class="string">'runoob, runoob, runoob.'</span>)</span><br><span class="line">[<span class="string">'runoob'</span>, <span class="string">'runoob'</span>, <span class="string">'runoob'</span>, <span class="string">''</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'(\W+)'</span>, <span class="string">' runoob, runoob, runoob.'</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">' '</span>, <span class="string">'runoob'</span>, <span class="string">', '</span>, <span class="string">'runoob'</span>, <span class="string">', '</span>, <span class="string">'runoob'</span>, <span class="string">'.'</span>, <span class="string">''</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'\W+'</span>, <span class="string">' runoob, runoob, runoob.'</span>, <span class="number">1</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">'runoob, runoob, runoob.'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'a*'</span>, <span class="string">'hello world'</span>)   <span class="comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span></span><br><span class="line">[<span class="string">'hello world'</span>]</span><br></pre></td></tr></table></figure>

<h5 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h5><p><strong>re.RegexObject</strong></p>
<p>re.compile() 返回 RegexObject 对象。</p>
<p><strong>re.MatchObject</strong></p>
<p>group() 返回被 RE 匹配的字符串。</p>
<ul>
<li><strong>start()</strong> 返回匹配开始的位置</li>
<li><strong>end()</strong> 返回匹配结束的位置</li>
<li><strong>span()</strong> 返回一个元组包含匹配 (开始,结束) 的位置</li>
</ul>
<h5 id="正则表达式修饰符-可选标志"><a href="#正则表达式修饰符-可选标志" class="headerlink" title="正则表达式修饰符 - 可选标志"></a>正则表达式修饰符 - 可选标志</h5><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">re.I</td>
<td align="left">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="left">re.L</td>
<td align="left">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="left">re.M</td>
<td align="left">多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td align="left">re.S</td>
<td align="left">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="left">re.U</td>
<td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td align="left">re.X</td>
<td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
<h5 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h5><p>模式字符串使用特殊的语法来表示一个正则表达式：</p>
<p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p>
<p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p>
<p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p>
<p>反斜杠本身需要使用反斜杠转义。</p>
<p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 <strong>r’\t’</strong>，等价于 <strong>\t</strong> )匹配相应的特殊字符。</p>
<p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配字符串的末尾。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td align="left">re*</td>
<td align="left">匹配0个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re+</td>
<td align="left">匹配1个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re?</td>
<td align="left">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td align="left">re{ n}</td>
<td align="left">匹配n个前面表达式。例如，”o{2}”不能匹配”Bob”中的”o”，但是能匹配”food”中的两个o。</td>
</tr>
<tr>
<td align="left">re{ n,}</td>
<td align="left">精确匹配n个前面表达式。例如，”o{2,}”不能匹配”Bob”中的”o”，但能匹配”foooood”中的所有o。”o{1,}”等价于”o+”。”o{0,}”则等价于”o*”。</td>
</tr>
<tr>
<td align="left">re{ n, m}</td>
<td align="left">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td align="left">a| b</td>
<td align="left">匹配a或b</td>
</tr>
<tr>
<td align="left">(re)</td>
<td align="left">匹配括号内的表达式，也表示一个组</td>
</tr>
<tr>
<td align="left">(?imx)</td>
<td align="left">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?-imx)</td>
<td align="left">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?: re)</td>
<td align="left">类似 (…), 但是不表示一个组</td>
</tr>
<tr>
<td align="left">(?imx: re)</td>
<td align="left">在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?-imx: re)</td>
<td align="left">在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?#…)</td>
<td align="left">注释.</td>
</tr>
<tr>
<td align="left">(?= re)</td>
<td align="left">前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td align="left">(?! re)</td>
<td align="left">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。</td>
</tr>
<tr>
<td align="left">(?&gt; re)</td>
<td align="left">匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配数字字母下划线</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配非数字字母下划线</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符，等价于 [\t\n\r\f]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配任意数字，等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配任意非数字</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开始</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结束</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\n, \t, 等。</td>
<td align="left">匹配一个换行符。匹配一个制表符, 等</td>
</tr>
<tr>
<td align="left">\1…\9</td>
<td align="left">匹配第n个分组的内容。</td>
</tr>
<tr>
<td align="left">\10</td>
<td align="left">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody></table>
<h5 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a>正则表达式实例</h5><h6 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">python</td>
<td align="left">匹配 “python”.</td>
</tr>
</tbody></table>
<h6 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[Pp]ython</td>
<td align="left">匹配 “Python” 或 “python”</td>
</tr>
<tr>
<td align="left">rub[ye]</td>
<td align="left">匹配 “ruby” 或 “rube”</td>
</tr>
<tr>
<td align="left">[aeiou]</td>
<td align="left">匹配中括号内的任意一个字母</td>
</tr>
<tr>
<td align="left">[0-9]</td>
<td align="left">匹配任何数字。类似于 [0123456789]</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">匹配任何小写字母</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">匹配任何大写字母</td>
</tr>
<tr>
<td align="left">[a-zA-Z0-9]</td>
<td align="left">匹配任何字母及数字</td>
</tr>
<tr>
<td align="left">[^aeiou]</td>
<td align="left">除了aeiou字母以外的所有字符</td>
</tr>
<tr>
<td align="left">[^0-9]</td>
<td align="left">匹配除了数字外的字符</td>
</tr>
</tbody></table>
<h6 id="特殊字符类"><a href="#特殊字符类" class="headerlink" title="特殊字符类"></a>特殊字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Python教程</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu服务管理两种方式service和systemctl</title>
    <url>/2020/03/20/ubuntu%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8Fservice%E5%92%8Csystemctl/</url>
    <content><![CDATA[<p>Linux 服务管理两种方式service和systemctl</p>
<a id="more"></a>

<h4 id="1-service命令"><a href="#1-service命令" class="headerlink" title="1.service命令"></a>1.service命令</h4><p>service命令其实是去/etc/init.d目录下，去执行相关程序。</p>
<p>其中脚本需要我们自己编写。</p>
<h5 id="1-1-基本步骤"><a href="#1-1-基本步骤" class="headerlink" title="1.1 基本步骤"></a>1.1 基本步骤</h5><ol>
<li>进入 <code>/etc/init.d</code></li>
<li>简历一个脚本文件，并赋予755权限：<code>chmod 755 文件名</code></li>
</ol>
<p>以kms服务脚本为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          kms-service</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Start kms at boot time</span></span><br><span class="line"><span class="comment"># Description:       Start or stop the KMS-service</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">NAME=<span class="string">"KMS"</span></span><br><span class="line">NAME_BIN=<span class="string">"kms"</span></span><br><span class="line">FILE=<span class="string">"/home/ubuntu"</span></span><br><span class="line">BIN=<span class="string">"<span class="variable">$&#123;FILE&#125;</span>/kms"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Green_font_prefix=<span class="string">"\033[32m"</span> &amp;&amp; Red_font_prefix=<span class="string">"\033[31m"</span> &amp;&amp; Green_background_prefix=<span class="string">"\033[42;37m"</span> &amp;&amp; Red_background_prefix=<span class="string">"\033[41;37m"</span> &amp;&amp; Font_color_suffix=<span class="string">"\033[0m"</span></span><br><span class="line">Info=<span class="string">"<span class="variable">$&#123;Green_font_prefix&#125;</span>[信息]<span class="variable">$&#123;Font_color_suffix&#125;</span>"</span></span><br><span class="line">Error=<span class="string">"<span class="variable">$&#123;Red_font_prefix&#125;</span>[错误]<span class="variable">$&#123;Font_color_suffix&#125;</span>"</span></span><br><span class="line">RETVAL=0</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_running</span></span>()&#123;</span><br><span class="line">	PID=$(ps -ef |grep <span class="string">"<span class="variable">$&#123;NAME_BIN&#125;</span>"</span> |grep -v <span class="string">"grep"</span> |grep -v <span class="string">"init.d"</span> |grep -v <span class="string">"service"</span> |awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line">	<span class="keyword">if</span> [[ ! -z <span class="variable">$&#123;PID&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#echo -e "$&#123;Info&#125;$&#123;NAME&#125; 正在运行！"</span></span><br><span class="line">		<span class="built_in">return</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="comment">#echo -e "$&#123;Error&#125;$&#123;NAME&#125; 没有运行！"</span></span><br><span class="line">		<span class="built_in">return</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行..."</span> &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cd</span> <span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动中..."</span></span><br><span class="line">		<span class="built_in">ulimit</span> -n 51200</span><br><span class="line">		./kms </span><br><span class="line">		sleep 1s</span><br><span class="line">		check_running</span><br><span class="line">		<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 启动成功 !"</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 启动失败(请运行脚本查看日志错误输出) !"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$&#123;PID&#125;</span></span><br><span class="line">		RETVAL=$?</span><br><span class="line">		<span class="keyword">if</span> [[ <span class="variable">$RETVAL</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 停止成功 !"</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Error&#125;</span> <span class="variable">$NAME</span> 停止失败 !"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行"</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line">	check_running</span><br><span class="line">	<span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#View_User</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> (PID <span class="variable">$&#123;PID&#125;</span>) 正在运行..."</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;Info&#125;</span> <span class="variable">$NAME</span> 未运行 !"</span></span><br><span class="line">		RETVAL=1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">	stop</span><br><span class="line">	sleep 2s</span><br><span class="line">	start</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">	start|stop|restart|status)</span><br><span class="line">	<span class="variable">$1</span></span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"使用方法: <span class="variable">$0</span> &#123; start | stop | restart | status &#125;"</span></span><br><span class="line">	RETVAL=1</span><br><span class="line">	;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-加入到系统启动中"><a href="#1-2-加入到系统启动中" class="headerlink" title="1.2 加入到系统启动中"></a>1.2 加入到系统启动中</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加到系统启动</span><br><span class="line">update-rc.d kms defaults </span><br><span class="line">// 从系统启动中删除</span><br><span class="line">update-rc.d kms remove</span><br></pre></td></tr></table></figure>

<h5 id="1-3-启动服务"><a href="#1-3-启动服务" class="headerlink" title="1.3 启动服务"></a>1.3 启动服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service kms start</span><br><span class="line">service kms stop</span><br></pre></td></tr></table></figure>

<h4 id="2-systemctl命令"><a href="#2-systemctl命令" class="headerlink" title="2.systemctl命令"></a>2.systemctl命令</h4><p>​    systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。systemd对应的进程管理命令是<strong>systemctl</strong>。</p>
<p>还是以kms服务脚本为例</p>
<p>新建一个<code>kms.service</code>文件，保存在 <code>/etc/systemd/system/kms.service</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=kms-service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kms</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -9 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>可以看到service文件一般由：<strong>[Unit]</strong>、<strong>[Service]</strong>和<strong>[Install]</strong> 三部分组成</p>
<ol>
<li>[Unit]<br>主要是对这个服务的说明，内容， 文档介绍以及对一些依赖服务定义</li>
<li>[Service]<br>服务的主体定义，主要定义服务的一些运行参数，及操作动作</li>
<li>[Install]<br>服务安装的相关设置，一般可设置为多用户的</li>
</ol>
<p><u>以下是具体参数</u></p>
<p><strong>[Unit]</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Description</td>
<td>服务描述，作为systemctl status 命令输出的一个介绍</td>
</tr>
<tr>
<td>Documentation</td>
<td>一个url 定义服务的具体介绍网址</td>
</tr>
<tr>
<td>After</td>
<td>在什么服务启动之后</td>
</tr>
<tr>
<td>Before</td>
<td>在什么服务启动之前启动</td>
</tr>
<tr>
<td>Requires</td>
<td>依赖其他的单元服务， 需要与列出的服务一起激活，若任何服务无法启动，则该单元不会被激活</td>
</tr>
<tr>
<td>Wants</td>
<td>比Requires依赖性弱，若其他服务没有启动成功，该服务也不受影响，只是表示一种推荐</td>
</tr>
</tbody></table>
<p><strong>[Service]</strong></p>
<table>
<thead>
<tr>
<th>Type</th>
<th>1.simple默认参数，进程作为主进程<br/>2.forking是后台运行的形式，主进程退出，os接管子进程</th>
</tr>
</thead>
<tbody><tr>
<td>User</td>
<td>设置服务运行的用户</td>
</tr>
<tr>
<td>Group</td>
<td>设置服务运行的用户组</td>
</tr>
<tr>
<td>PIDFile</td>
<td>存放PID的文件路径, 对于type设置为<strong>forking</strong>建议使用该项</td>
</tr>
<tr>
<td>ExecStart</td>
<td>服务的具体运行命令</td>
</tr>
<tr>
<td>ExecStartPre</td>
<td>指定在ExecStart<strong>前</strong>执行的自定义命令</td>
</tr>
<tr>
<td>ExecStartPost</td>
<td>指定在ExecStart<strong>后</strong>执行的自定义命令</td>
</tr>
<tr>
<td>ExecReload</td>
<td>重启命令，重新加载的动作， 重新加载时执行的命令或者脚本</td>
</tr>
<tr>
<td>ExecStop</td>
<td>停止命令，停止时要执行的命令或脚本</td>
</tr>
<tr>
<td>Restart</td>
<td>定义何种情况Systemd会自动重启当前服务，值： 包括<strong>always（总是重启）</strong>、<strong>no</strong> 、<strong>on-success</strong>、<strong>on-failure</strong>、<strong>on-abnormal</strong>、<strong>on-abort</strong>、<strong>on-watchdog</strong> 对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal</td>
</tr>
<tr>
<td>TimeoutStartSec</td>
<td>等待启动的时间。如果守护进程服务没有在配置的时间内发送启动完成的信号，则该服务将被认为失败， 服务将退出。<br/>以秒为单位， “0”来禁用。默认为， 默认使用DefaultTimeoutStartSec=20，<br/>若使用Type=<strong>oneshot</strong>，则该模式默认情况下超时是禁用的</td>
</tr>
<tr>
<td>TimeoutStopSec</td>
<td>等待关闭的超时时间</td>
</tr>
<tr>
<td>TimeoutSec</td>
<td>快速配置TimeoutStartSec和TimeoutStopSec时间</td>
</tr>
<tr>
<td>KillMode</td>
<td>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉<br/>process：只杀主进程<br/>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号<br/>none：没有进程会被杀掉，只是执行服务的 stop 命令。</td>
</tr>
<tr>
<td>Environmen</td>
<td>指定环境变量</td>
</tr>
<tr>
<td>PrivateTmp=True</td>
<td>表示给服务分配独立的临时空间</td>
</tr>
</tbody></table>
<p>注意：<strong>[Service]</strong>部分的启动、重启、停止命令必须使用绝对路径，使用相对路径则会报错</p>
<p><strong>[Install]</strong></p>
<table>
<thead>
<tr>
<th>RequiredBy</th>
<th>依赖该服务的服务列表</th>
</tr>
</thead>
<tbody><tr>
<td>WantedBy</td>
<td>表示该服务所在的 Target， multi-user.target 可以设置为多用户模式具体参考手册systemd.unit(5)</td>
</tr>
</tbody></table>
<p>参考手册：<a href="http://www.jinbuguo.com/systemd/systemd.index.html" target="_blank" rel="noopener">http://www.jinbuguo.com/systemd/systemd.index.html</a></p>
<p><strong>服务状态列表：</strong></p>
<table>
<thead>
<tr>
<th>loaded</th>
<th>系统服务已经初始化完成，加载过配置</th>
</tr>
</thead>
<tbody><tr>
<td>actvie(running)</td>
<td>正常运行</td>
</tr>
<tr>
<td>actvie(exited)</td>
<td>正常结束的服务</td>
</tr>
<tr>
<td>active(waitting)</td>
<td>等待其他的事件才继续处理</td>
</tr>
<tr>
<td>inactive</td>
<td>服务关闭</td>
</tr>
<tr>
<td>enabled</td>
<td>服务开机启动</td>
</tr>
<tr>
<td>disabled</td>
<td>服务开机不自启</td>
</tr>
<tr>
<td>static</td>
<td>服务开机启动项不可被管理</td>
</tr>
<tr>
<td>falied</td>
<td>系统配置错误</td>
</tr>
</tbody></table>
<p><strong>管理日志：</strong></p>
<p>Systemd 统一管理所有 Unit 的启动日志。</p>
<table>
<thead>
<tr>
<th>journalctl</th>
<th>命令查看所有日志(内核日志和应用日志)</th>
</tr>
</thead>
<tbody><tr>
<td>journalctl _PID=</td>
<td>查看对应pid的日志</td>
</tr>
</tbody></table>
<p><strong>unit管理：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl start apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>service</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray快速上手全记录</title>
    <url>/2020/04/23/v2ray%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>快速上手v2ray</p>
<a id="more"></a>

<h5 id="1-下载并运行脚本"><a href="#1-下载并运行脚本" class="headerlink" title="1.下载并运行脚本"></a>1.下载并运行脚本</h5><p>需要先安装curl：<code>apt-get install curl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure>

<p>安装完毕后使用以下命令启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure>

<p>以服务方式启动，开机自启动</p>
<h5 id="2-caddy-websockset"><a href="#2-caddy-websockset" class="headerlink" title="2.caddy+websockset"></a>2.caddy+websockset</h5><h6 id="2-1服务端"><a href="#2-1服务端" class="headerlink" title="2.1服务端"></a>2.1服务端</h6><p>安装caddy：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://git.io/vra5C -O - -o /dev/null|bash</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>安装证书时需要查看端口是否占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:443</span><br></pre></td></tr></table></figure>

<p>编辑v2ray配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>

<p>最简单的配置文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warning"</span>,</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">10000</span>,  <span class="comment">//端口号</span></span><br><span class="line">    <span class="attr">"listen"</span>:<span class="string">"127.0.0.1"</span>,  <span class="comment">//默认只监听内网ip</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,  <span class="comment">//加密协议</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="string">"c4ef8fef-91b9-4f84-8b81-8aae98f3b7f9"</span>,    <span class="comment">//uuid</span></span><br><span class="line">          <span class="attr">"alterId"</span>: <span class="number">32</span> <span class="comment">//附加id</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>:<span class="string">"ws"</span>,  <span class="comment">//传输方式</span></span><br><span class="line">        <span class="attr">"wsSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/app"</span>  <span class="comment">//分流路径</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line">],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件下载：<code>https://ftp.fly97.cn/configuration/config.json</code></p>
<p>编辑caddy配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">caddy edit</span><br></pre></td></tr></table></figure>

<p>最简单的caddy配置文件：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">http://yoursite &#123;</span></span><br><span class="line">        root /var/caddywww/</span><br><span class="line">        gzip</span><br><span class="line">        tls off</span><br><span class="line">        log /var/log/caddy/access.log</span><br><span class="line">        errors /var/log/caddy/error.log</span><br><span class="line">        proxy /app localhost:10000 &#123;</span><br><span class="line">        websocket</span><br><span class="line">        header_upstream -Origin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件下载：<code>https://ftp.fly97.cn/configuration/Caddyfile</code></p>
<h6 id="2-2客户端"><a href="#2-2客户端" class="headerlink" title="2.2客户端"></a>2.2客户端</h6><p>建议使用clash，支持win和安卓平台</p>
<p>win平台：</p>
<p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases" target="_blank" rel="noopener">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200423211355498.png" alt="image-20200423211355498"></p>
<p>其中配置文件需要自己编写，支持快速分流。</p>
<p>重点介绍以下v2ray部分的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Will be ignored after profile selection</span><br><span class="line">Proxy:</span><br><span class="line">  - name: gost</span><br><span class="line">    type: socks5</span><br><span class="line">    server: 127.0.0.1</span><br><span class="line">    port: 1080</span><br><span class="line">  - name: v2ray</span><br><span class="line">    type: vmess</span><br><span class="line">    server: yoursite</span><br><span class="line">    uuid: &quot;c4ef8fef-91b9-4f84-8b81-8aae98f3b7f9&quot;</span><br><span class="line">    port: 80</span><br><span class="line">    cipher: &quot;auto&quot;</span><br><span class="line">    udp: false</span><br><span class="line">    network: ws</span><br><span class="line">    ws-path: &quot;&#x2F;app&quot;</span><br><span class="line">    tls: false</span><br><span class="line">    alterId: 32</span><br><span class="line">Proxy Group:</span><br><span class="line">  - name: Proxy</span><br><span class="line">    type: select</span><br><span class="line">    proxies:</span><br><span class="line">      - gost</span><br><span class="line">      - v2ray</span><br><span class="line">Rule:</span><br><span class="line">- DOMAIN-SUFFIX,aliyun,Proxy</span><br><span class="line">- DOMAIN,fly97.cn,Proxy</span><br><span class="line">- DOMAIN-SUFFIX,alibabacloud,Proxy</span><br><span class="line">- DOMAIN-SUFFIX,cn,DIRECT</span><br><span class="line"></span><br><span class="line"># ad tracks</span><br><span class="line">- DOMAIN,graph.instagram.com,DIRECT</span><br><span class="line">- DOMAIN,www.googleadservices.com,DIRECT</span><br><span class="line">- DOMAIN,control.kochava.com,DIRECT</span><br><span class="line">- DOMAIN,www.google-analytics.com,DIRECT</span><br><span class="line">- DOMAIN,ssl.google-analytics.com,DIRECT</span><br><span class="line">- DOMAIN,nexus.officeapps.live.com,DIRECT</span><br><span class="line">- DOMAIN,googleads.g.doubleclick.net,DIRECT</span><br><span class="line">- DOMAIN,e.crashlytics.com,DIRECT</span><br><span class="line">- DOMAIN,ib.adnxs.com,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,googlesyndication.com,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,googletagmanager.com,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,googletagservices.com,DIRECT</span><br><span class="line">- DOMAIN,safebrowsing.googleapis.com,DIRECT</span><br><span class="line"></span><br><span class="line">- DOMAIN,google.com,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,paypal,DIRECT</span><br><span class="line">- DOMAIN-SUFFIX,google.com,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,facebook,Proxy</span><br><span class="line">- DOMAIN-SUFFIX,fb.me,Proxy</span><br><span class="line">- DOMAIN-SUFFIX,fbcdn.net,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,gmail,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,twitter,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,instagram,Proxy</span><br><span class="line">- DOMAIN-SUFFIX,twimg.com,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,blogspot,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,whatsapp,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,scholar,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,glados,Proxy</span><br><span class="line">- DOMAIN-KEYWORD,mailgun,Proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- DOMAIN-KEYWORD,weibo,DIRECT</span><br><span class="line">- DOMAIN-KEYWORD,hostloc,DIRECT</span><br></pre></td></tr></table></figure>

<h5 id="3-caddy-websocket-tls"><a href="#3-caddy-websocket-tls" class="headerlink" title="3.caddy+websocket+tls"></a>3.caddy+websocket+tls</h5><p>首先第二步中服务器端口换成443</p>
<p>其次更改caddy配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;yoursite &#123;</span><br><span class="line">        root &#x2F;var&#x2F;caddywww&#x2F;</span><br><span class="line">        gzip</span><br><span class="line">        tls yoursite@mail</span><br><span class="line">        log &#x2F;var&#x2F;log&#x2F;caddy&#x2F;access.log</span><br><span class="line">        errors &#x2F;var&#x2F;log&#x2F;caddy&#x2F;error.log</span><br><span class="line">        proxy &#x2F;app localhost:10000 &#123;</span><br><span class="line">        websocket</span><br><span class="line">        header_upstream -Origin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-caddy-tls-web"><a href="#4-caddy-tls-web" class="headerlink" title="4.caddy+tls+web"></a>4.caddy+tls+web</h5><p>优点：减少tls握手时间</p>
<h6 id="安装tls分流器"><a href="#安装tls分流器" class="headerlink" title="安装tls分流器"></a>安装tls分流器</h6><p>对于 linux-amd64 可以使用脚本安装，以 root 身份执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/liberal-boy/tls-shunt-proxy/master/dist/install.sh)</span><br></pre></td></tr></table></figure>

<p>配置文件位于：<code>/etc/tls-shunt-proxy/config.yaml</code></p>
<p>项目地址：<a href="https://github.com/liberal-boy/tls-shunt-proxy" target="_blank" rel="noopener">https://github.com/liberal-boy/tls-shunt-proxy</a></p>
<h6 id="修改分流器配置文件"><a href="#修改分流器配置文件" class="headerlink" title="修改分流器配置文件"></a>修改分流器配置文件</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:443</span></span><br><span class="line"><span class="attr">vhosts:</span></span><br><span class="line">    <span class="comment"># 将 example.com 改为你的域名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">tlsoffloading:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">managedcert:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">alpn:</span> <span class="string">h2,http/1.1</span></span><br><span class="line">    <span class="comment"># 如果不需要兼容 tls12, 可改为 tls13</span></span><br><span class="line">    <span class="attr">protocols:</span> <span class="string">tls12,tls13</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">fileServer</span></span><br><span class="line">      <span class="comment"># /var/www/html 是静态网站目录</span></span><br><span class="line">      <span class="attr">args:</span> <span class="string">/var/www/html</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">proxyPass</span></span><br><span class="line">      <span class="attr">args:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:40001</span></span><br></pre></td></tr></table></figure>

<h6 id="修改v2ray配置文件"><a href="#修改v2ray配置文件" class="headerlink" title="修改v2ray配置文件"></a>修改v2ray配置文件</h6><p>编辑文件：<code>vim /etc/v2ray/config.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"inbounds"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">            <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">40001</span>,</span><br><span class="line">            <span class="attr">"settings"</span>: &#123;</span><br><span class="line">                <span class="attr">"clients"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"id"</span>: <span class="string">"f2435e5c-9ad9-4367-836a-8341117d0a5f"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">                <span class="attr">"network"</span>: <span class="string">"tcp"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"outbounds"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"protocol"</span>: <span class="string">"freedom"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart tls-shunt-proxy</span><br><span class="line">systemctl restart v2ray</span><br></pre></td></tr></table></figure>

<h6 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h6><p>客户端连接<code>example.com:443 vmess tls</code>即可</p>
<p>转载自：</p>
<p><a href="https://guide.v2fly.org/advanced/tcp_tls_shunt_proxy.html#实现" target="_blank" rel="noopener">https://guide.v2fly.org/advanced/tcp_tls_shunt_proxy.html#%E5%AE%9E%E7%8E%B0</a></p>
]]></content>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>一键安装影梭脚本</title>
    <url>/2019/12/31/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ShadowsocksR%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h5 id="🐕头保命。"><a href="#🐕头保命。" class="headerlink" title="🐕头保命。"></a>🐕头保命。</h5><a id="more"></a>

<h5 id="服务端脚本"><a href="#服务端脚本" class="headerlink" title="服务端脚本"></a><del>服务端脚本</del></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fly97.fun/files/git/shadowsocksr/ssr.sh &amp;&amp; chmod +x ssr.sh</span><br></pre></td></tr></table></figure>

<h5 id="一键安装ShadowsocksR服务端脚本"><a href="#一键安装ShadowsocksR服务端脚本" class="headerlink" title="一键安装ShadowsocksR服务端脚本"></a>一键安装ShadowsocksR服务端脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://code.aliyun.com/wf.09/shadowsocks/raw/master/ssr.sh &amp;&amp; chmod +x ssr.sh</span><br></pre></td></tr></table></figure>

<h5 id="一键安装ShadowsocksR客户端脚本"><a href="#一键安装ShadowsocksR客户端脚本" class="headerlink" title="一键安装ShadowsocksR客户端脚本"></a>一键安装ShadowsocksR客户端脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://code.aliyun.com/wf.09/shadowsocks/raw/master/ssr &amp;&amp; chmod +x ssr &amp;&amp; mv ssr /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ShadowsocksR</tag>
      </tags>
  </entry>
  <entry>
    <title>Outline软件使用全记录</title>
    <url>/2020/01/04/%E4%BD%BF%E7%94%A8Outline%20App%E8%BF%9B%E8%A1%8C%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>Outline软件使用全记录</p>
<a id="more"></a>

<h5 id="1-如果是苹果手机，首先需要下载一个工具"><a href="#1-如果是苹果手机，首先需要下载一个工具" class="headerlink" title="1.如果是苹果手机，首先需要下载一个工具."></a>1.如果是苹果手机，首先需要下载一个工具.</h5><p>国区现在全面下架代理工具，需要一个港区或者美区ID进行下载，大多是软件收费，少数软件免费但是有广告。楼主偶然发现了一个国区也可以用的代理工具：</p>
<p><a href="https://apps.apple.com/cn/app/outline-app/id1356177741" target="_blank" rel="noopener">https://apps.apple.com/cn/app/outline-app/id1356177741</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/1.png" alt="1.png"></p>
<h5 id="2-购买相应服务后就可以使用了"><a href="#2-购买相应服务后就可以使用了" class="headerlink" title="2.购买相应服务后就可以使用了."></a>2.购买相应服务后就可以使用了.</h5><p>楼主提供了一个免费节点，复制以下链接，点击小钥匙，选择允许添加VPN配置就可以免费使用啦</p>
<img src="https://cdn.jsdelivr.net/gh/wf09/upload/2.jpg" alt="2.jpg" style="zoom:33%;" />

<p><del>ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTpOWkVyeFN3MTh5YmQ=@47.241.3.53:20650/?outline=1</del></p>
]]></content>
      <tags>
        <tag>Outline</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WSL链接Github仓库以及如何配置ssh权限问题</title>
    <url>/2020/05/31/%E4%BD%BF%E7%94%A8WSL%E9%93%BE%E6%8E%A5Github%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>话不多说，先上教程。</p>
<a id="more"></a>

<h4 id="1-首先，要安装WSL-Windows-Subsystem-for-Linux-。即适用于Window10的Linux子系统。"><a href="#1-首先，要安装WSL-Windows-Subsystem-for-Linux-。即适用于Window10的Linux子系统。" class="headerlink" title="1.首先，要安装WSL(Windows Subsystem for Linux)。即适用于Window10的Linux子系统。"></a>1.首先，要安装WSL(Windows Subsystem for Linux)。即适用于Window10的Linux子系统。</h4><ul>
<li>打开开发者选项，选择开发人员模式。<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228201007723.png" alt="image-20191228201007723"></li>
</ul>
<ul>
<li>打开控制面板-程序，选择适用于Linux的Windows子系统。<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20191228201255121.png" alt="image-20191228201255121"></li>
</ul>
<ul>
<li><p>打开Windows应用商店，搜索linux，选择你喜欢的linux系统点击安装。这里以Ubuntu为例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/20200531102849.png" alt="image-20191228201558935"></p>
</li>
</ul>
<p>第一次打开要选择用户名和密码，因为笔者已经安装完了，这里就不再截图了。到此为止WSL就安装好了。</p>
<h4 id="2-使用WSL安装hexo相关软件并链接到github仓库"><a href="#2-使用WSL安装hexo相关软件并链接到github仓库" class="headerlink" title="2.使用WSL安装hexo相关软件并链接到github仓库"></a>2.使用WSL安装hexo相关软件并链接到github仓库</h4><p>打开刚刚安装好的Ubuntu，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<h5 id="初始化git："><a href="#初始化git：" class="headerlink" title="初始化git："></a>初始化git：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入项目</span><br><span class="line">cd Desktop&#x2F;myproject</span><br><span class="line">&#x2F;&#x2F;初始化git</span><br><span class="line"> git init</span><br></pre></td></tr></table></figure>

<h5 id="创建ssh-key："><a href="#创建ssh-key：" class="headerlink" title="创建ssh key："></a>创建ssh key：</h5><p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>

<p>这里的<strong><a href="mailto:your_email@youremail.com">your_email@youremail.com</a></strong>是你的<strong>邮箱地址</strong>，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>
<h5 id="把密码导入GitHub："><a href="#把密码导入GitHub：" class="headerlink" title="把密码导入GitHub："></a>把密码导入GitHub：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>
<h5 id="验证是否连接成功："><a href="#验证是否连接成功：" class="headerlink" title="验证是否连接成功："></a>验证是否连接成功：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>
<h5 id="设置username和email："><a href="#设置username和email：" class="headerlink" title="设置username和email："></a>设置username和email：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="添加远程地址："><a href="#添加远程地址：" class="headerlink" title="添加远程地址："></a>添加远程地址：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName&#x2F;yourRepo.git</span><br></pre></td></tr></table></figure>

<p>后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。</p>
<h5 id="上传项目："><a href="#上传项目：" class="headerlink" title="上传项目："></a>上传项目：</h5><p>依次运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;my project push&#39;</span><br><span class="line">git push origin master  --force</span><br></pre></td></tr></table></figure>

<p>这里的<strong>master</strong>指的是主分支名，如果是其他分支，则填写相应的分支名。</p>
<p>这样我们就将我们的项目上传到github仓库。</p>
<h5 id="备注：私钥和公钥的权限问题"><a href="#备注：私钥和公钥的权限问题" class="headerlink" title="备注：私钥和公钥的权限问题"></a>备注：私钥和公钥的权限问题</h5><p>确认将 SSH 权限应用于公钥和私钥文件。</p>
<ol>
<li><p>通过运行以下命令来检查 SSH 公钥文件：<code>ls -l /etc/ssh/*key.pub</code></p>
</li>
<li><p>确认所有者是 root，组所有者是 root，并且文件权限设置为 0644 (-rw-r–r–)。</p>
</li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key.pub</code></p>
<p><code>chgrp root /etc/ssh/*key.pub</code></p>
<p><code>chmod 644 /etc/ssh/*key.pub</code></p>
</li>
<li><p>通过运行以下命令来检查 SSH 私钥文件：<code>ls -l /etc/ssh/*key</code></p>
</li>
<li><p>通过运行以下命令来修复任何问题。</p>
<p><code>chown root /etc/ssh/*key</code></p>
<p><code>chgrp root /etc/ssh/*key</code></p>
<p><code>chmod 644 /etc/ssh/*key</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>SSH</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Windows git本地搭建hexo并推送至github</title>
    <url>/2020/01/03/%E4%BD%BF%E7%94%A8Windows%20git%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E5%B9%B6%E6%8E%A8%E9%80%81%E8%87%B3github/</url>
    <content><![CDATA[<p>之前因为重装系统丢掉了已经搭建好的Hexo博客配置文件。经过这件事以后我深刻地记住了备份的重要性。趁着刚刚搭建完博客，于是写一篇文章水一下！</p>
<a id="more"></a>

<p>1.安装git软件</p>
<p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200119205126173.png" alt="image-20200119205126173" style="zoom: 50%;" />

<p>注意：此步需要添加git到环境变量，<del>因为写这边文章时，笔者已经安装完成了。</del></p>
<p>即最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p>
<p>2.安装nodejs </p>
<p><a href="https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v13.6.0/node-v13.6.0-x64.msi</a></p>
<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200119205441241.png" alt="image-20200119205441241" style="zoom:50%;" />

<p>注意：此步需要添加nodejs到系统变量。</p>
<p>安装完毕后打开cmd输入<code>node -v npm -v</code>。如果显示版本号就说明安装完成了。</p>
<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200119210346780.png" alt="image-20200119210346780" style="zoom:50%;" />

<p>2.1给npm添加国内镜像源</p>
<p>由于众所周知的原因，官方源如此缓慢，故使用阿里爸爸的源进行加速。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>3.安装hexo</p>
<p>在合适的地方新建一个文件夹，用来存放自己的博客文件。比如我的博客文件都存放在</p>
<p><code>C:\Users\wf09\Desktop\hexo</code></p>
<p>在该目录下右键点击<code>Git Bash Here</code></p>
<img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200119211049388.png" alt="image-20200119211049388" style="zoom:50%;" />

<p>在git命令行下依次输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g             <span class="comment">#安装hexo相关组件</span></span><br><span class="line">hexo -v                             <span class="comment">#检查是否安装完成</span></span><br><span class="line">hexo init                           <span class="comment">#初始化hexo博客目录</span></span><br><span class="line">npm install                         <span class="comment">#安装相关依赖</span></span><br><span class="line">npm install hexo-server --save      <span class="comment">#安装hexo服务器模块</span></span><br></pre></td></tr></table></figure>

<p>安装完成后，输入<code>hexo s</code>命令以启动服务器，网站会在 <code>http://localhost:4000</code>下启动。在服务器启动期间，Hexo会监视文件变动并自动更新，无须重启服务器。</p>
<p>可以通过 <code>-p</code> 选项指定其他端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure>

<p>此时打开<code>http://localhost:4000</code>就可以成功启动网站了。</p>
<p>4.推送本地网页到Github</p>
<p>4.1链接Github</p>
<p>右键打开<code>Git Bash</code>，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"username@your.site"</span></span><br></pre></td></tr></table></figure>

<p>用户名和邮件根据你注册GitHub的信息自行修改。</p>
<p>输入以下命令以生成SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"username@your.site"</span></span><br></pre></td></tr></table></figure>

<p>打开<a href="https://link.zhihu.com/?target=http%3A//github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名称任意。</p>
<p><code>Git Bash</code> 中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将输出的内容复制到框中，点击确定保存。</p>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果出现一个警告，输入<code>yes</code>回车并忽略他就好。</p>
<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>
<p>4.2设置hexo使其可以把网站发布在GitHub</p>
<p>打开博客根目录下的<code>_config.yml</code>文件：</p>
<p>找到以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>默认分支是<code>master</code></p>
<p>在博客根目录下打开<code>Git Bash</code>，安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p>
<p>打开你的<code>博客根目录\source\_posts</code>，会发现多了一个文件夹和一个markdown文件。文件夹用于存放图片等数据。</p>
<p>写完markdown文件后，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g                   <span class="comment">#生成静态网页</span></span><br><span class="line">hexo s                   <span class="comment">#本地预览效果</span></span><br><span class="line">hexo d                   <span class="comment">#把网页推送到GitHub</span></span><br></pre></td></tr></table></figure>

<p>此时打开你的<code>github.io</code>主页就可以看到发布的文章了。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh快速申请ssl证书</title>
    <url>/2020/03/23/%E4%BD%BF%E7%94%A8acme.sh%E5%BF%AB%E9%80%9F%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p><strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书.</p>
<p><strong>转载自：<a href="https://github.com/acmesh-official/acme.sh/wiki/说明" target="_blank" rel="noopener">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></strong></p>
<a id="more"></a>

<p>主要步骤:</p>
<ol>
<li>安装 <strong>acme.sh</strong></li>
<li>生成证书</li>
<li>copy 证书到 nginx/apache 或者其他服务</li>
<li>更新证书</li>
<li>更新 <strong>acme.sh</strong></li>
<li>出错怎么办, 如何调试</li>
</ol>
<p>下面详细介绍.</p>
<h1 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 <strong>acme.sh</strong></h1><p>安装很简单, 一个命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>普通用户和 root 用户都可以安装使用.<br>安装过程进行了以下几步:</p>
<p>1) 把 acme.sh 安装到你的 <strong>home</strong> 目录下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.acme.sh&#x2F;</span><br></pre></td></tr></table></figure>
<p>并创建 一个 bash 的 alias, 方便你的使用:  <code>alias acme.sh=~/.acme.sh/acme.sh</code></p>
<p>2). 自动为你创建 cronjob,  每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p>
<p>更高级的安装选项请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a></p>
<p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p>
<h1 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h1><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.<br>一般有两种方式验证: http 和 dns 验证.</p>
<h3 id="1-http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了"><a href="#1-http-方式需要在你的网站根目录下放置一个文件-来验证你的域名所有权-完成验证-然后就可以生成证书了" class="headerlink" title="1. http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了."></a>1. http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  &#x2F;home&#x2F;wwwroot&#x2F;mydomain.com&#x2F;</span><br></pre></td></tr></table></figure>

<p>只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用. </p>
<p>如果你用的 <strong>apache</strong>服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --apache</span><br></pre></td></tr></table></figure>

<p>如果你用的 <strong>nginx</strong>服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure>

<p><strong>注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.</strong></p>
<p>如果你还没有运行任何 web 服务, <strong>80</strong> 端口是空闲的, 那么 <strong>acme.sh</strong> 还能假装自己是一个webserver, 临时听在<strong>80</strong> 端口, 完成验证:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue -d mydomain.com   --standalone</span><br></pre></td></tr></table></figure>

<p>更高级的用法请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</a></p>
<h3 id="2-手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权"><a href="#2-手动-dns-方式-手动在域名上添加一条-txt-解析记录-验证域名所有权" class="headerlink" title="2. 手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权."></a>2. 手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.</h3><p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证.<br>坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  --dns   -d mydomain.com</span><br></pre></td></tr></table></figure>

<p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p>
<p>等待解析完成之后, 重新生成证书:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --renew   -d mydomain.com</span><br></pre></td></tr></table></figure>
<p>注意第二次这里用的是 <code>--renew</code></p>
<p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p>
<p><strong>acme.sh</strong> 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成. </p>
<p>以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的.<br>然后:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export DP_Id&#x3D;&quot;1234&quot;</span><br><span class="line"></span><br><span class="line">export DP_Key&#x3D;&quot;sADDsdasdgdsf&quot;</span><br><span class="line"></span><br><span class="line">acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com</span><br></pre></td></tr></table></figure>

<p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了.<br>直接生成就好了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue   -d  mydomain2.com   --dns  dns_dp</span><br></pre></td></tr></table></figure>

<p>更详细的 api 用法: <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p>
<h1 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h1><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p>
<p>注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,  请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p>
<p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置,<br>例如:</p>
<h2 id="Apache-example"><a href="#Apache-example" class="headerlink" title="Apache example:"></a>Apache example:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--cert-file      &#x2F;path&#x2F;to&#x2F;certfile&#x2F;in&#x2F;apache&#x2F;cert.pem  \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;apache&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;certfile&#x2F;apache&#x2F;fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d example.com \</span><br><span class="line">--key-file       &#x2F;path&#x2F;to&#x2F;keyfile&#x2F;in&#x2F;nginx&#x2F;key.pem  \</span><br><span class="line">--fullchain-file &#x2F;path&#x2F;to&#x2F;fullchain&#x2F;nginx&#x2F;cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>

<p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p>
<p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/" target="_blank" rel="noopener">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p>
<p><code>--installcert</code>命令可以携带很多参数, 来指定目标文件.  并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p>
<p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p>
<p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p>
<h1 id="4-更新证书"><a href="#4-更新证书" class="headerlink" title="4. 更新证书"></a>4. 更新证书</h1><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>
<h1 id="5-更新-acme-sh"><a href="#5-更新-acme-sh" class="headerlink" title="5. 更新 acme.sh"></a>5. 更新 acme.sh</h1><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步. </p>
<p>升级 acme.sh 到最新版 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure>

<p>如果你不想手动升级, 可以开启自动升级:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure>
<p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure>


<h1 id="6-出错怎么办："><a href="#6-出错怎么办：" class="headerlink" title="6. 出错怎么办："></a>6. 出错怎么办：</h1><p>如果出错, 请添加 debug log：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug  2</span><br></pre></td></tr></table></figure>

<p>请参考： <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</a></p>
<p>最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.</p>
<p><a href="https://github.com/Neilpang/acme.sh/wiki" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki</a></p>
]]></content>
      <tags>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pip离线安装pytorch-gpu</title>
    <url>/2020/02/17/%E4%BD%BF%E7%94%A8pip%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85pytorch/</url>
    <content><![CDATA[<p>废话不多说，上教程。</p>
<a id="more"></a>

<h4 id="1-查看Linux预装的Python3版本"><a href="#1-查看Linux预装的Python3版本" class="headerlink" title="1.查看Linux预装的Python3版本"></a>1.查看Linux预装的Python3版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@wf09:~<span class="comment"># python3 -V</span></span><br><span class="line">Python 3.6.9</span><br></pre></td></tr></table></figure>

<h4 id="2-下载对应的Pytorch版本"><a href="#2-下载对应的Pytorch版本" class="headerlink" title="2.下载对应的Pytorch版本"></a>2.下载对应的Pytorch版本</h4><p><a href="https://download.pytorch.org/whl/torch_stable.html" target="_blank" rel="noopener">https://download.pytorch.org/whl/torch_stable.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/3.png" alt=""></p>
<p>Python版本是3.6.9，下载的版本是<code>cpu/torch-1.4.0%2Bcpu-cp36-cp36m-linux_x86_64.whl</code></p>
<h4 id="3-安装pip3"><a href="#3-安装pip3" class="headerlink" title="3.安装pip3"></a>3.安装pip3</h4><h5 id="3-1-Linux"><a href="#3-1-Linux" class="headerlink" title="3.1 Linux"></a>3.1 Linux</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p><strong>tips：</strong>由于apt源自带的pip版本过低，可以执行如下命令升级pip。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>升级完pip以后，pip就相当于pip3了。</p>
<h5 id="3-2-Win"><a href="#3-2-Win" class="headerlink" title="3.2 Win"></a>3.2 Win</h5><p>安装完Python后默认安装pip，执行命令升级pip即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h4 id="4-离线安装Pytorch"><a href="#4-离线安装Pytorch" class="headerlink" title="4.离线安装Pytorch"></a>4.离线安装Pytorch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links=torch-1.4.0+cpu-cp36-cp36m-linux_x86_64.whl torch</span><br></pre></td></tr></table></figure>

<h4 id="5-windows10卸载Pytorch-cpu版本并安装GPU版本"><a href="#5-windows10卸载Pytorch-cpu版本并安装GPU版本" class="headerlink" title="5.windows10卸载Pytorch-cpu版本并安装GPU版本"></a>5.windows10卸载Pytorch-cpu版本并安装GPU版本</h4><h5 id="5-1-卸载cpu版"><a href="#5-1-卸载cpu版" class="headerlink" title="5.1 卸载cpu版"></a>5.1 卸载cpu版</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall torch   		<span class="comment">#卸载torch</span></span><br><span class="line">pip uninstall torchvison    <span class="comment">#卸载torchvison</span></span><br></pre></td></tr></table></figure>

<h5 id="5-2-安装CUDA"><a href="#5-2-安装CUDA" class="headerlink" title="5.2 安装CUDA"></a>5.2 安装CUDA</h5><p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315143756001.png" alt="image-20200315143756001"></p>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>笔者使用的<code>Win10</code>，附上离线安装版链接：</p>
<p><del><a href="http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe" target="_blank" rel="noopener">http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe</a></del></p>
<h6 id="Tips：最新版本的CUDA-10-2-现在还无法被Pytorch支持，安装10-1版本的即可。"><a href="#Tips：最新版本的CUDA-10-2-现在还无法被Pytorch支持，安装10-1版本的即可。" class="headerlink" title="Tips：最新版本的CUDA(10.2)现在还无法被Pytorch支持，安装10.1版本的即可。"></a>Tips：最新版本的CUDA(10.2)现在还无法被Pytorch支持，安装10.1版本的即可。</h6><p><a href="http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_426.00_win10.exe" target="_blank" rel="noopener">http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_426.00_win10.exe</a></p>
<p>下载完毕，双击打开即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315145247036.png" alt="image-20200315145247036"></p>
<p>点击OK选择下一步。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315145432177.png" alt="image-20200315145432177"></p>
<p>等待进度条达到100%，会自动打开安装程序。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315150124951.png" alt="image-20200315150124951"></p>
<p>选择自定义，然后全部选中，期间会升级本机的<strong>显卡驱动</strong>。</p>
<h6 id="Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA"><a href="#Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA" class="headerlink" title="Tips：升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装CUDA"></a><strong>Tips：</strong>升级显卡驱动是很重要的一步，不升级到最新版本无法正确安装<strong>CUDA</strong></h6><p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315150240356.png" alt="image-20200315150240356"></p>
<p>等待安装完毕。</p>
<h5 id="5-3-安装cuDNN"><a href="#5-3-安装cuDNN" class="headerlink" title="5.3 安装cuDNN"></a>5.3 安装cuDNN</h5><p><strong>相比标准的cuda，它在一些常用的神经网络操作上进行了性能的优化，比如卷积，pooling，归一化，以及激活层等等。</strong></p>
<p>下载过程中需要注册 <strong>NVIDIA account</strong>。</p>
<p>下载完毕后执行解压：会生成<code>cuda/include、cuda/lib、cuda/bin</code>三个目录；</p>
<p>然后分别将<code>cuda/include、cuda/lib、cuda/bin</code>三个目录中的内容拷贝到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1</code>对应的<code>include、lib、bin</code>目录下即可。</p>
<h5 id="5-4安装Pytorch-GPU版本"><a href="#5-4安装Pytorch-GPU版本" class="headerlink" title="5.4安装Pytorch-GPU版本"></a><strong>5.4安装Pytorch-GPU版本</strong></h5><p>下载Pytorch-CUDA版本的whl文件，用于离线安装。</p>
<p><a href="https://download.pytorch.org/whl/torch_stable.html" target="_blank" rel="noopener">https://download.pytorch.org/whl/torch_stable.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315151856974.png" alt="image-20200315151856974"></p>
<p>其中，<strong>cu101</strong>代表CUDA版本是10.1，<strong>cp37</strong>代表CPython version 3.7（指的是C语言实现的Python，就是原汁原味的Python。除了CPython以外，还有用Java实现的Jython，用.NET实现的IronPython，使Python方便地和Java程序、.NET程序集成。另外还有一些实验性的Python解释器比如PyPy），<strong>win</strong>代表Windows操作系统，<strong>amd64</strong>代表64位CPU平台。</p>
<p>使用<strong>管理员权限</strong>打开<code>Anaconda Prompt (Anaconda3)</code>cmd窗口，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torch-1.4.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>等待安装完毕。</p>
<p>使用相同的操作安装 <code>torchvision</code>，其中包含流行的数据集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install 下载路径\torchvision-0.5.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>至此<strong>Pytoch-GPU</strong>版已经全部安装完毕。</p>
<p><strong>5.5 测试是否安装成功</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wf09/upload/image-20200315153854134.png" alt="image-20200315153854134"></p>
<p>打开cmd窗口，输入<strong>python</strong>进入<strong>python环境</strong>。依次输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>输出为<strong>True</strong>，安装完毕。</p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Pip镜像源</title>
    <url>/2020/05/11/%E4%BF%AE%E6%94%B9pip%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>修改pip镜像源</p>
<a id="more"></a>

<p>清华源：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>
<p>豆瓣源：<a href="https://pypi.doubanio.com/simple/" target="_blank" rel="noopener">https://pypi.doubanio.com/simple/</a></p>
<p>使用方法</p>
<p>临时使用：可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>例如：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> gevent</p>
<p>永久修改：linux下，修改 <code>~/.pip/pip.conf</code>，设置为以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>

<p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\wf09.pip，新建文件pip.ini，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>初探卷积神经网络01</title>
    <url>/2020/05/29/%E5%88%9D%E6%8E%A2%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C01/</url>
    <content><![CDATA[<p>使用Pytorch进行MNIST识别</p>
<a id="more"></a>

<h5 id="数据集部分："><a href="#数据集部分：" class="headerlink" title="数据集部分："></a>数据集部分：</h5><p>下载地址：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a></p>
<p>如果使用<code>torchvision</code>下载速度较慢可以参考：<a href="https://blog.csdn.net/york1996/article/details/81780065" target="_blank" rel="noopener">https://blog.csdn.net/york1996/article/details/81780065</a></p>
<h5 id="网络定义部分："><a href="#网络定义部分：" class="headerlink" title="网络定义部分："></a>网络定义部分：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)         <span class="comment">#输入通道数为1, 输出通道数为32, 卷积核大小为3*3, 步长为1</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>)        </span><br><span class="line">        self.dropout1 = nn.Dropout2d(<span class="number">0.25</span>)          <span class="comment">#随机将输入张量中整个通道设置为0</span></span><br><span class="line">        self.dropout2 = nn.Dropout2d(<span class="number">0.5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">9216</span>, <span class="number">256</span>)             <span class="comment">#全连接层</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>)                      <span class="comment">#使用2*2的窗口进行最大值池化</span></span><br><span class="line">        x = self.dropout1(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)                     <span class="comment">#展平一个连续范围的维度</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.dropout2(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        output = F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>卷积层第一层： <code>nn.Conv2d(1, 32, 3, 1)</code></p>
<p>输入通道数为1，输出通道数为32，使用大小为3*3的卷积核，步长为1。</p>
<p>卷积层第二层：<code>nn.Conv2d(32, 64, 3, 1)</code> </p>
<p>输入通道数为32，输出通道数为64，使用大小为3*3的卷积核，步长为1。</p>
<p>前向传播中使用池化层：<code>F.max_pool2d(x, 2)</code>   </p>
<p>最后展平一个连续的维度：<code>torch.flatten(x, 1)</code></p>
<p><strong>详细描述：</strong></p>
<p>大小为<strong>1X28X28</strong>的图片，经过第一层卷积层，维度变为<strong>32X26X26</strong>，在经过第二层卷积层，维度变为<strong>64X24X24</strong>，在经过一层最大值池化层处理以后，维度变为<strong>64X12X12</strong>，全部展开以后维度变为<strong>1X9216</strong>。</p>
<h5 id="卷积计算公式："><a href="#卷积计算公式：" class="headerlink" title="卷积计算公式："></a>卷积计算公式：</h5><p><code>卷积后输出图像宽/高=(图像宽/高 - 卷积核宽/高 + 用零填充的个数) / 步长</code></p>
<h5 id="池化计算公式："><a href="#池化计算公式：" class="headerlink" title="池化计算公式："></a>池化计算公式：</h5><p><code>池化后图像宽/高=池化前图像宽/高 / 池化窗口宽度</code></p>
]]></content>
      <tags>
        <tag>Pytorch</tag>
        <tag>CNN</tag>
        <tag>MNIST</tag>
      </tags>
  </entry>
  <entry>
    <title>升级pip</title>
    <url>/2020/05/27/%E5%8D%87%E7%BA%A7pip/</url>
    <content><![CDATA[<p>安装pip：<code>apt install python3-pip</code></p>
<p>升级pip：<code>python -m pip install --upgrade pip</code></p>
]]></content>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
</search>
